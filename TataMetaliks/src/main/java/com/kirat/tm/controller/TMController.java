
package com.kirat.tm.controller;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.log4j.Logger;

//import javax.inject.Inject;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kirat.tm.constants.DecryptString;
import com.kirat.tm.constants.OLCProp;
import com.kirat.tm.dto.ModuleListDto;
import com.kirat.tm.dto.ReportListDto;
import com.kirat.tm.dto.RoleListDto;
import com.kirat.tm.dto.TransactionListDto;
import com.kirat.tm.json.TableJsonObject;
import com.kirat.tm.model.Account;
import com.kirat.tm.model.Role;
import com.kirat.tm.model.RoleTransactionDetails;
import com.kirat.tm.model.ServiceResponse;
import com.kirat.tm.model.ChildTask;
import com.kirat.tm.model.DocumentDetails;
import com.kirat.tm.model.EmailDetails;
import com.kirat.tm.model.ExceptionLog;
import com.kirat.tm.model.GraphData;
import com.kirat.tm.model.Hybrid;
import com.kirat.tm.model.JsonResponse;
import com.kirat.tm.model.MppContent;
import com.kirat.tm.model.ParentTask;
import com.kirat.tm.model.PlaylistDetail;
import com.kirat.tm.model.PlaylistHeader;
import com.kirat.tm.model.Project;
import com.kirat.tm.model.ProjectInterval;
import com.kirat.tm.model.Mpp;
import com.kirat.tm.model.ProjectTable;
import com.kirat.tm.model.Resources;
import com.kirat.tm.model.ResponsePojo;
import com.kirat.tm.model.TaskTarget;
import com.kirat.tm.model.Tasks;
import com.kirat.tm.model.Transactions;
import com.kirat.tm.model.UserAccess;
import com.kirat.tm.model.ProjectSummary;

import net.sf.mpxj.MPXJException;
import net.sf.mpxj.ProjectFile;
import net.sf.mpxj.Task;
import net.sf.mpxj.mpp.MPPReader;
import net.sf.mpxj.reader.ProjectReader;

import com.kirat.tm.utils.AppMsgReader;
import com.kirat.tm.utils.ConvertToSQLDate;
import com.kirat.tm.utils.OLCUtil;
//import com.kirat.tm.utils.ReadExternalData;
import com.kirat.tm.utils.ResourceUtil;
import com.kirat.tm.utils.TaskUtil;

@RestController
@EnableWebMvc
public class TMController {
	
	static final Logger logger = Logger.getLogger(TMController.class);

	// @Inject
	// ExceptionLog exceptionLog;
	public String mpploc = "/home/TataMetaliks/";
	 //public String mpploc = "D://home/TataMetaliks/";
	//public String docURL = OLCUtil.getValue(OLCProp.URL_OF_DOCUMENTSERVICE);
	public String docURL = "http://localhost:8086";
	public String accountURL = OLCUtil.getValue(OLCProp.URL_OF_ACCOUNTSERVICE);
	public String accessURL = OLCUtil.getValue(OLCProp.URL_OF_ACCESSSERVICE);
	public String roleURL = OLCUtil.getValue(OLCProp.URL_OF_ROLESERVICE);
	public String moduleURL = OLCUtil.getValue(OLCProp.URL_OF_MODULESERVICE);
	public String emailURL = OLCUtil.getValue(OLCProp.URL_OF_MAILSERVICE);
	// public String taskURL = OLCUtil.getValue(OLCProp.URL_OF_TASKSERVICE);
	//public String gatepassURL = "http://14.141.110.54:8080/GatePassManagementTest";
//	public String gatepassURL = "http://14.141.110.54:8080/GatePassManagement";
	
	//public String gatepassURL = "http://localhost:8080/GatePassManagement";
	public String gatepassURL = "http://localhost:8087";
	// ReadExternalData rded = new ReadExternalData();
	final String picURL = "";


	@PostMapping(value = "/userAuthenticate")
	public JsonResponse userAuthenticate(@RequestBody ModelMap requestModel)
			throws MPXJException, JsonParseException, JsonMappingException, IOException {
		// exceptionLog.setRequestObject(requestModel);
		logger.info("Log file started");
		System.out.println("user authenticate");
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap responsemodel = new ModelMap();
		responsemodel.addAttribute("message", "");
		responsemodel.addAttribute("code", "");

		try {

			String userid = DecryptString.main((String) requestModel.get("userId"));
			String[] usrstr = userid.split("@");
			System.out.println(usrstr[0]);
			System.out.println(usrstr[1]);
			if (usrstr[1].equals("tatametaliks.co.in")) {
				System.out.println("LDAP authentication");
				responsemodel.put("message", "LDAP authentication");
				responsemodel.put("code", "MSG002");
			} else {
				System.out.println("TMT authentication");
				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.APPLICATION_JSON);
				ModelMap accountmodel = new ModelMap();
				accountmodel.addAttribute("email", DecryptString.main((String) requestModel.get("userId")));
				accountmodel.addAttribute("password", DecryptString.main((String) requestModel.get("password")));
				String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(accountmodel);
				HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
				String answer = restTemplate.postForObject(accountURL + "/accountAuthentication", entity, String.class);
				System.out.println(answer);
				ResponsePojo result = mapper.readValue(answer, ResponsePojo.class);

				// Status authenticate = mapper.readValue(answer, Status.class);
				if (result.getResponsedata() != null) {
					String accountId = result.getResponsedata().getId();
					if (result.getMessage().equalsIgnoreCase("Authenticated")) {
						ResponsePojo serviceResponse = restTemplate.getForObject(accountURL + "/Account/" + accountId,
								ResponsePojo.class);
						ModelMap md = new ModelMap();
						md.addAttribute("userid", serviceResponse.getResponsedata().getId());
						md.addAttribute("email", serviceResponse.getResponsedata().getEmail());
						responsemodel.addAttribute("Profile", md);
						sendMail(serviceResponse.getResponsedata().getOtp(),
								serviceResponse.getResponsedata().getEmail());
						responsemodel.put("message", result.getMessage());
						responsemodel.put("code", "MSG001");
					} else {
						responsemodel.put("message", result.getMessage());
						responsemodel.put("code", "MSG002");
					}
				} else {
					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG002");
				}
			}
		} catch (Exception e) {
			responsemodel.put("message", "Something wrong happened");
			responsemodel.put("code", "MSG002");
		}
		jsonResponse.setResult(responsemodel);
		return jsonResponse;
	}

	
	
	
	@SuppressWarnings("unchecked")
	@PostMapping(value = "/loginUser")
	public JsonResponse loginUser(@RequestBody ModelMap requestModel)
			throws MPXJException, JsonParseException, JsonMappingException, IOException {
		// exceptionLog.setRequestObject(requestModel);
		System.out.println("login user");
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap responsemodel = new ModelMap();
		responsemodel.addAttribute("message", "");
		responsemodel.addAttribute("code", "");
		
		try {
		
		
		String userid =DecryptString.main((String) requestModel.get("userId"));
		String[] usrstr = userid.split("@");
		System.out.println(usrstr[0]);
		System.out.println(usrstr[1]);
		List projectList = new ArrayList();
		List projectList1 = new ArrayList();
		if (usrstr[1].equals("tatametaliks.co.in")) {
			System.out.println("LDAP authentication");
			responsemodel.put("message", "LDAP authentication");
			responsemodel.put("code", "MSG002");
		} else {
			System.out.println("TMT authentication");
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			ModelMap accountmodel = new ModelMap();
			accountmodel.addAttribute("email",  DecryptString.main((String) requestModel.get("userId")));
			accountmodel.addAttribute("password", DecryptString.main((String) requestModel.get("password")));
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(accountmodel);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			String answer = restTemplate.postForObject(accountURL + "/accountAuthentication", entity, String.class);
			System.out.println(answer);
			ResponsePojo result = mapper.readValue(answer, ResponsePojo.class);

			// Status authenticate = mapper.readValue(answer, Status.class);
			if (result.getResponsedata() != null) {
				String accountId = result.getResponsedata().getId();
				if (result.getMessage().equalsIgnoreCase("Authenticated")) {
					ResponsePojo serviceResponse = restTemplate.getForObject(accountURL + "/Account/" + accountId,
							ResponsePojo.class);
					responsemodel.addAttribute("Profile", serviceResponse.getResponsedata());

					String projectListJson = restTemplate.getForObject(docURL + "/Project", String.class);
					List<Project> listOfProjects = mapper.readValue(projectListJson,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));
					for (int i = 0; i < listOfProjects.size(); i++) {
						projectList.add(
								listOfProjects.get(i).getProjectid() + "-" + listOfProjects.get(i).getProjectname());
					}

					String projectListJson1 = restTemplate.getForObject(docURL + "/ProjectAll", String.class);
					List<Project> listOfProjects1 = mapper.readValue(projectListJson1,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));

					String category = restTemplate.getForObject(docURL + "/getMasterCategoryList", String.class);
					List<String> categoryList = mapper.readValue(category, List.class);
					String subCategory = restTemplate.getForObject(docURL + "/getMasterSubCategoryList", String.class);
					List<String> subCategoryList = mapper.readValue(subCategory, List.class);

					String decipline = restTemplate.getForObject(docURL + "/getDeciplineList", String.class);
					List<String> deciplineList = mapper.readValue(decipline, List.class);

					ServiceResponse userlistResponse = restTemplate.getForObject(accountURL + "/Account",
							ServiceResponse.class);
					String usrListjson = mapper.writeValueAsString(userlistResponse.getResponsedata());

					List<Account> userlist = mapper.readValue(usrListjson,
							mapper.getTypeFactory().constructCollectionType(List.class, Account.class));

					responsemodel.addAttribute("userlist", userlist);
					
					Map<String, Timestamp> projectUpdateDtJson = restTemplate.getForObject(docURL + "/getprojectUpdateDate", HashMap.class);
					responsemodel.addAttribute("projectUpdateDt", projectUpdateDtJson);
					responsemodel.addAttribute("projectlist", listOfProjects);
					responsemodel.addAttribute("projectlistA", listOfProjects1);
					responsemodel.addAttribute("plist", projectList);
					responsemodel.addAttribute("totalProjects", listOfProjects.size());
					responsemodel.addAttribute("category", categoryList);
					responsemodel.addAttribute("subcategory", subCategoryList);
					responsemodel.addAttribute("decipline", deciplineList);
					responsemodel.addAttribute("logidentity", "Login");

					if (serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Super")
							|| serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Support")) {

						RoleListDto roles = restTemplate.getForObject(roleURL + "/Role", RoleListDto.class);
						responsemodel.addAttribute("Roles", roles.getResponsedata());

						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);
						System.out.println(mod.getResponsedata());
						List<String> listofmod = new ArrayList();

						for (int l = 0; l < roles.getResponsedata().length; l++) {
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ roles.getResponsedata()[l].getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));

							List<Transactions> listoftrans = new ArrayList<Transactions>();

							for (int m = 0; m < roleaccessList.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listoftrans.add(transactions);
							}
							responsemodel.addAttribute(roles.getResponsedata()[l].getRolename().toString(),
									listoftrans);
						}
						responsemodel.addAttribute("Module", mod.getResponsedata());

						TransactionListDto transactions = restTemplate.getForObject(moduleURL + "/transaction",
								TransactionListDto.class);
						responsemodel.addAttribute("Transactions", transactions.getResponsedata());
						ReportListDto reports = restTemplate.getForObject(moduleURL + "/report", ReportListDto.class);
						responsemodel.addAttribute("Reports", reports.getResponsedata());

						
					} else {
						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);

						ServiceResponse ResponseRoledata = restTemplate.getForObject(accessURL + "/UserAccessByAccount/"
								+ serviceResponse.getResponsedata().getId().toString(), ServiceResponse.class);
						String rolejson = mapper.writeValueAsString(ResponseRoledata.getResponsedata());

						List<UserAccess> userAccessList = mapper.readValue(rolejson,
								mapper.getTypeFactory().constructCollectionType(List.class, UserAccess.class));
						System.out.println(accessURL + "/ByRole/" + ResponseRoledata.getResponsedata());

						
						List<Role> listofRole = new ArrayList<Role>();

						for (int i = 0; i < userAccessList.size(); i++) {
							List<Transactions> listTransactions = new ArrayList<Transactions>();
							ServiceResponse ResponseRoleDtl = restTemplate.getForObject(
									roleURL + "/Role/" + userAccessList.get(i).getRoleid().toString(),
									ServiceResponse.class);

							String roljson = mapper.writeValueAsString(ResponseRoleDtl.getResponsedata());
							Role role = mapper.readValue(roljson, Role.class);
							listofRole.add(role);
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ userAccessList.get(i).getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList1 = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));
							for (int m = 0; m < roleaccessList1.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList1.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listTransactions.add(transactions);

							}

							responsemodel.addAttribute(role.getRolename().toString(), listTransactions);

						}
						responsemodel.addAttribute("Roles", listofRole);
						responsemodel.addAttribute("Module", mod.getResponsedata());
					}

					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG001");

				} else {
					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG002");
				}
			} else {
				responsemodel.put("message", result.getMessage());
				responsemodel.put("code", "MSG002");
			}
		}
		} catch (Exception e) {
			responsemodel.put("message", "Something wrong happened");
			responsemodel.put("code", "MSG002");
		}
		jsonResponse.setResult(responsemodel);
		return jsonResponse;
	}

	@SuppressWarnings("unchecked")
	@PostMapping(value = "/Relogin")
	public JsonResponse Relogin(@RequestBody ModelMap requestModel)
			throws MPXJException, JsonParseException, JsonMappingException, IOException {
		
		System.out.println("relogin user");
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap responsemodel = new ModelMap();
		List projectList = new ArrayList();
		List projectList1 = new ArrayList();
		responsemodel.addAttribute("message", "");
		responsemodel.addAttribute("code", "");

		try {
		
		ResponsePojo result1 = restTemplate.getForObject(accountURL + "/AccountRelogin/" + requestModel.get("token"),
				ResponsePojo.class);
		String userid = "";
		if (result1.getResponsedata() != null) {
			userid = result1.getResponsedata().getEmail();
		}
		String[] usrstr = userid.split("@");
		System.out.println(usrstr[0]);
		System.out.println(usrstr[1]);

		if (usrstr[1].equals("tatametaliks.co.in")) {
			System.out.println("LDAP authentication");
			responsemodel.put("message", "LDAP authentication");
			responsemodel.put("code", "MSG002");
		} else {
			System.out.println("TMT authentication");
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			ModelMap accountmodel = new ModelMap();
			accountmodel.addAttribute("email", requestModel.get("userId"));
			accountmodel.addAttribute("password", requestModel.get("password"));
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(accountmodel);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			ResponsePojo result = restTemplate.getForObject(accountURL + "/AccountRelogin/" + requestModel.get("token"),
					ResponsePojo.class);
			
			if (result.getResponsedata() != null) {
				String accountId = result.getResponsedata().getId();
				if (result.getMessage().equalsIgnoreCase("Authenticated")) {
					ResponsePojo serviceResponse = restTemplate.getForObject(accountURL + "/Account/" + accountId,
							ResponsePojo.class);
					responsemodel.addAttribute("Profile", serviceResponse.getResponsedata());

					String projectListJson = restTemplate.getForObject(docURL + "/Project", String.class);
					List<Project> listOfProjects = mapper.readValue(projectListJson,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));
					for (int i = 0; i < listOfProjects.size(); i++) {
						projectList.add(
								listOfProjects.get(i).getProjectid() + "-" + listOfProjects.get(i).getProjectname());
					}

					String projectListJson1 = restTemplate.getForObject(docURL + "/ProjectAll", String.class);
					List<Project> listOfProjects1 = mapper.readValue(projectListJson1,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));

					String category = restTemplate.getForObject(docURL + "/getMasterCategoryList", String.class);
					List<String> categoryList = mapper.readValue(category, List.class);
					String subCategory = restTemplate.getForObject(docURL + "/getMasterSubCategoryList", String.class);
					List<String> subCategoryList = mapper.readValue(subCategory, List.class);

					String decipline = restTemplate.getForObject(docURL + "/getDeciplineList", String.class);
					List<String> deciplineList = mapper.readValue(decipline, List.class);

					ServiceResponse userlistResponse = restTemplate.getForObject(accountURL + "/Account",
							ServiceResponse.class);
					String usrListjson = mapper.writeValueAsString(userlistResponse.getResponsedata());

					List<Account> userlist = mapper.readValue(usrListjson,
							mapper.getTypeFactory().constructCollectionType(List.class, Account.class));

					responsemodel.addAttribute("userlist", userlist);
				
					Map<String, Timestamp> projectUpdateDtJson = restTemplate.getForObject(docURL + "/getprojectUpdateDate", HashMap.class);
					responsemodel.addAttribute("projectUpdateDt", projectUpdateDtJson);
					responsemodel.addAttribute("projectlist", listOfProjects);
					responsemodel.addAttribute("projectlistA", listOfProjects1);
					responsemodel.addAttribute("plist", projectList);
					responsemodel.addAttribute("totalProjects", listOfProjects.size());
					responsemodel.addAttribute("category", categoryList);
					responsemodel.addAttribute("subcategory", subCategoryList);
					responsemodel.addAttribute("decipline", deciplineList);
					responsemodel.addAttribute("logidentity", "ReLogin");
					if (serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Super")
							|| serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Support")) {

						RoleListDto roles = restTemplate.getForObject(roleURL + "/Role", RoleListDto.class);
						responsemodel.addAttribute("Roles", roles.getResponsedata());

						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);
						System.out.println(mod.getResponsedata());
						List<String> listofmod = new ArrayList();

						for (int l = 0; l < roles.getResponsedata().length; l++) {
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ roles.getResponsedata()[l].getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));

							List<Transactions> listoftrans = new ArrayList<Transactions>();

							for (int m = 0; m < roleaccessList.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listoftrans.add(transactions);
							}
							responsemodel.addAttribute(roles.getResponsedata()[l].getRolename().toString(),
									listoftrans);
						}
						responsemodel.addAttribute("Module", mod.getResponsedata());

						TransactionListDto transactions = restTemplate.getForObject(moduleURL + "/transaction",
								TransactionListDto.class);
						responsemodel.addAttribute("Transactions", transactions.getResponsedata());
						ReportListDto reports = restTemplate.getForObject(moduleURL + "/report", ReportListDto.class);
						responsemodel.addAttribute("Reports", reports.getResponsedata());

					} else {
						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);

						ServiceResponse ResponseRoledata = restTemplate.getForObject(accessURL + "/UserAccessByAccount/"
								+ serviceResponse.getResponsedata().getId().toString(), ServiceResponse.class);
						String rolejson = mapper.writeValueAsString(ResponseRoledata.getResponsedata());

						List<UserAccess> userAccessList = mapper.readValue(rolejson,
								mapper.getTypeFactory().constructCollectionType(List.class, UserAccess.class));
						System.out.println(accessURL + "/ByRole/" + ResponseRoledata.getResponsedata());

						List<Role> listofRole = new ArrayList<Role>();

						for (int i = 0; i < userAccessList.size(); i++) {
							List<Transactions> listTransactions = new ArrayList<Transactions>();
							ServiceResponse ResponseRoleDtl = restTemplate.getForObject(
									roleURL + "/Role/" + userAccessList.get(i).getRoleid().toString(),
									ServiceResponse.class);

							String roljson = mapper.writeValueAsString(ResponseRoleDtl.getResponsedata());
							Role role = mapper.readValue(roljson, Role.class);
							listofRole.add(role);
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ userAccessList.get(i).getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList1 = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));
							for (int m = 0; m < roleaccessList1.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList1.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listTransactions.add(transactions);

							}

							responsemodel.addAttribute(role.getRolename().toString(), listTransactions);

						}
						responsemodel.addAttribute("Roles", listofRole);
						responsemodel.addAttribute("Module", mod.getResponsedata());
					}

					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG001");

				} else {
					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG002");
				}
			} else {
				responsemodel.put("message", "Something wrong happened");
				responsemodel.put("code", "MSG002");
			}
		}
		} catch (Exception e) {
			responsemodel.put("message", "Something wrong happened");
			responsemodel.put("code", "MSG002");
			jsonResponse.setResult(responsemodel);
			return jsonResponse;
		}
		jsonResponse.setResult(responsemodel);
		return jsonResponse;

	}

	@PostMapping(value = "/createProject")
	public JsonResponse showCreateCasePage(@RequestBody Project project) throws JsonParseException,
			JsonMappingException, IOException, EncryptedDocumentException, InvalidFormatException {
		// exceptionLog.setRequestObject(project);
		RestTemplate restTemplate = new RestTemplate();
		ObjectMapper mapper = new ObjectMapper();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		if (project.getProjecticon().equalsIgnoreCase("") || project.getProjecticon().equalsIgnoreCase(null)) {
			project.setProjecticon("fa-briefcase");
		}

		project.setMppid("NA");
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(project);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);

		String answer = restTemplate.postForObject(docURL + "/project", entity, String.class);
		Status sts = mapper.readValue(answer, Status.class);
		project.setProjectid(sts.getCode());

		ProjectInterval projectInterval = new ProjectInterval();
		projectInterval.setProjectid(sts.getCode());
		projectInterval.setConstruction(3);
		projectInterval.setEngineering(3);
		projectInterval.setImage(3);
		projectInterval.setMajormilestone(3);
		projectInterval.setProcurement(3);
		projectInterval.setQuality(3);
		projectInterval.setRisk(3);
		projectInterval.setSafety(3);
		projectInterval.setVideo(3);
		String jsonInString1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(projectInterval);
		HttpEntity<String> entity1 = new HttpEntity<String>(jsonInString1, headers);
		String answer1 = restTemplate.postForObject(docURL + "/createProjectInterval", entity1, String.class);
		Workbook workbook = new XSSFWorkbook();
//		XSSFSheet sheet = (XSSFSheet) workbook.createSheet("Sheet 1");
		File dir = new File(mpploc + "/" + project.getProjectid() + "/XLSX/");
		if (!dir.exists())
			dir.mkdirs();
		FileOutputStream fileOut = new FileOutputStream(mpploc + "/" + project.getProjectid() + "/XLSX/"
				+ project.getProjectid() + " " + project.getProjectname() + ".xlsx");
		workbook.write(fileOut);
		workbook.close();
		fileOut.close();
		JsonResponse jsonResponse = new JsonResponse();
		jsonResponse.setResult(project);
		return jsonResponse;

	}

	@PostMapping(value = "/mppcontent")
	public JsonResponse mppcontent(@RequestBody ModelMap modelmap) throws IOException, MPXJException {
		ArrayList<MppContent> mppContentList = new ArrayList<MppContent>();
		ProjectReader reader = new MPPReader();
		ProjectFile project = reader.read(mpploc + modelmap.get("project"));
		for (Task task : project.getAllTasks()) {
			MppContent mppContent = new MppContent();
			mppContent.setTaskName(task.getName());
			DateFormat dateFormat = new SimpleDateFormat("E MMM dd HH:mm:ss yyyy");
			System.out.println(task.getActualStart());
			String strDate = dateFormat.format(task.getStart());
			mppContent.setStart(strDate);
			strDate = dateFormat.format(task.getFinish());
			mppContent.setFinish(strDate);
			mppContent.setDuration(task.getDuration().toString());
			if (task.getActualStart() != null) {
				strDate = dateFormat.format(task.getActualStart());
				mppContent.setActualStart(strDate);
			}
			if (task.getActualFinish() != null) {
				strDate = dateFormat.format(task.getActualFinish());
				mppContent.setActualFinish(strDate);
			}
			mppContent.setTotalSlack(task.getTotalSlack().toString());
			mppContent.setPercentageWork(task.getPercentageComplete().toString());
			mppContentList.add(mppContent);
		}
		TableJsonObject tableJsonObject = new TableJsonObject();
		tableJsonObject.setiTotalDisplayRecords(500);
		tableJsonObject.setiTotalRecords(500);
		tableJsonObject.setAaData(mppContentList);
		JsonResponse jsonResponse = new JsonResponse();
		jsonResponse.setResult(tableJsonObject);
		return jsonResponse;

	}

	@PostMapping(value = "/resourceList")
	public List<Resources> resourceList(@RequestBody ModelMap requestModel) throws MPXJException {
		ProjectReader reader = new MPPReader();
		ProjectFile project = reader.read(mpploc + requestModel.get("project") + ".mpp");
		List<Resources> result = new ArrayList<Resources>();
		ResourceUtil resourceutil = new ResourceUtil();
		result = resourceutil.getResourceList(project);
		return result;
	}

	@PostMapping(value = "/taskList")
	public List<Tasks> taskList(@RequestBody ModelMap requestModel) throws MPXJException {
		
		ProjectReader reader = new MPPReader();
		ProjectFile project = reader.read(mpploc + requestModel.get("project") + ".mpp");
		List<Tasks> result = new ArrayList<Tasks>();
		TaskUtil taskUtil = new TaskUtil();
		result = taskUtil.getTaskList(project);
		return result;
	}

	@PostMapping(value = "/mpp.web")
	public JsonResponse mpplist() throws IOException {
		ArrayList<ProjectTable> projectList = new ArrayList<ProjectTable>();
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectListJson = restTemplate.getForObject(docURL + "/getListOfAllProjects", String.class);
		List<Mpp> listOfProjects = mapper.readValue(projectListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, Mpp.class));
		for (int i = 0; i < listOfProjects.size(); i++) {
			ProjectTable project = new ProjectTable();
			String viewButton = "<button type='button' class='btn btn-sm btn-default' id='"
					+ listOfProjects.get(i).getProjectid() + "'><em class='fa fa-search'></em></button>";
			project.setCreatedOn(listOfProjects.get(i).getActualstart().toString());
			project.setProjectDetails(listOfProjects.get(i).getProjectname());
			project.setProjectId(listOfProjects.get(i).getProjectid());
			project.setStatus(listOfProjects.get(i).getPercentagework());
			project.setAction(viewButton);
			projectList.add(project);

		}
		TableJsonObject tableJsonObject = new TableJsonObject();
		tableJsonObject.setiTotalDisplayRecords(500);
		tableJsonObject.setiTotalRecords(500);
		tableJsonObject.setAaData(projectList);
		jsonResponse.setResult(tableJsonObject);
		return jsonResponse;
	}

	@PostMapping(value = "/parentTask.web")
	public JsonResponse parentTask(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectId = (String) model.get("projectId");
		String taskListJson = restTemplate.getForObject(docURL + "/getListOfTasksByProjectId/" + projectId,
				String.class);
		List<ParentTask> listOfTasks = mapper.readValue(taskListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, ParentTask.class));

		TableJsonObject tableJsonObject = new TableJsonObject();
		tableJsonObject.setiTotalDisplayRecords(500);
		tableJsonObject.setiTotalRecords(500);
		tableJsonObject.setAaData(listOfTasks);
		jsonResponse.setResult(tableJsonObject);
		return jsonResponse;
	}

	@PostMapping(value = "/childTask.web")
	public JsonResponse childTask(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String taskId = (String) model.get("taskId");
		String taskListJson = restTemplate.getForObject(docURL + "/getListOfChildTasksByParentId/" + taskId,
				String.class);
		List<ChildTask> listOfChildTasks = mapper.readValue(taskListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, ChildTask.class));

		TableJsonObject tableJsonObject = new TableJsonObject();
		tableJsonObject.setiTotalDisplayRecords(500);
		tableJsonObject.setiTotalRecords(500);
		tableJsonObject.setAaData(listOfChildTasks);
		jsonResponse.setResult(tableJsonObject);
		return jsonResponse;
	}

	@PostMapping(value = "/gridData.web")
	public JsonResponse gridData() throws IOException {
		ArrayList<Hybrid> List = new ArrayList<Hybrid>();
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectListJson = restTemplate.getForObject(docURL + "/getListOfAllProjects", String.class);
		List<Mpp> listOfProjects = mapper.readValue(projectListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, Mpp.class));
		for (int i = 0; i < listOfProjects.size(); i++) {
			Hybrid project = new Hybrid();
			project.setProjectid(listOfProjects.get(i).getProjectid());
			project.setProjectname(listOfProjects.get(i).getProjectname());
			project.setSerialnumber(listOfProjects.get(i).getSerialnumber());
			if (listOfProjects.get(i).getStart() != null) {
				project.setStart(listOfProjects.get(i).getStart());
			}
			if (listOfProjects.get(i).getFinish() != null) {
				project.setFinish(listOfProjects.get(i).getFinish());
			}
			if (listOfProjects.get(i).getActualstart() != null) {
				project.setActualstart(listOfProjects.get(i).getActualstart());
			}
			if (listOfProjects.get(i).getActualfinish() != null) {
				project.setActualfinish(listOfProjects.get(i).getActualfinish());
			}
			project.setDuration(listOfProjects.get(i).getDuration());
			project.setTotalslack(listOfProjects.get(i).getTotalslack());
			project.setPercentagework(listOfProjects.get(i).getPercentagework());
			project.setParent(null);
			project.setIsLeaf(false);
			project.setLevel("0");
			project.setLoaded(true);
			project.setExpanded(false);
			List.add(project);
			String taskListJson = restTemplate.getForObject(
					docURL + "/getListOfTasksByProjectId/" + listOfProjects.get(i).getProjectid(), String.class);
			List<ParentTask> listOfTasks = mapper.readValue(taskListJson,
					mapper.getTypeFactory().constructCollectionType(List.class, ParentTask.class));
			for (int j = 0; j < listOfTasks.size(); j++) {
				Hybrid task = new Hybrid();
				task.setProjectid(listOfTasks.get(j).getTaskid());
				task.setProjectname(listOfTasks.get(j).getTaskname());
				task.setSerialnumber(listOfTasks.get(j).getSerialnumber());
				if (listOfTasks.get(j).getStart() != null) {
					task.setStart(listOfTasks.get(j).getStart());
				}
				if (listOfTasks.get(j).getFinish() != null) {
					task.setFinish(listOfTasks.get(j).getFinish());
				}
				if (listOfTasks.get(j).getActualstart() != null) {
					task.setActualstart(listOfTasks.get(j).getActualstart());
				}
				if (listOfTasks.get(j).getActualfinish() != null) {
					task.setActualfinish(listOfTasks.get(j).getActualfinish());
				}
				task.setDuration(listOfTasks.get(j).getDuration());
				task.setTotalslack(listOfTasks.get(j).getTotalslack());
				task.setPercentagework(listOfTasks.get(j).getPercentagework());
				task.setParent(listOfTasks.get(j).getProjectid());
				task.setIsLeaf(false);
				task.setLevel("1");
				task.setLoaded(true);
				task.setExpanded(false);
				List.add(task);
				String childListJson = restTemplate.getForObject(
						docURL + "/getListOfChildTasksByParentId/" + listOfTasks.get(j).getTaskid(), String.class);
				List<ChildTask> listOfChild = mapper.readValue(childListJson,
						mapper.getTypeFactory().constructCollectionType(List.class, ChildTask.class));
				for (int k = 0; k < listOfChild.size(); k++) {
					Hybrid child = new Hybrid();
					child.setProjectid(listOfChild.get(k).getTaskid());
					child.setProjectname(listOfChild.get(k).getTaskname());
					child.setSerialnumber(listOfChild.get(k).getSerialnumber());
					if (listOfChild.get(k).getActualfinish() != null) {
						child.setStart(listOfChild.get(k).getStart());
					}
					if (listOfChild.get(k).getFinish() != null) {
						child.setFinish(listOfChild.get(k).getFinish());
					}
					if (listOfChild.get(k).getActualstart() != null) {
						child.setActualstart(listOfChild.get(k).getActualstart());
					}
					if (listOfChild.get(k).getActualfinish() != null) {
						child.setActualfinish(listOfChild.get(k).getActualfinish());
					}
					child.setDuration(listOfChild.get(k).getDuration());
					child.setTotalslack(listOfChild.get(k).getTotalslack());
					child.setPercentagework(listOfChild.get(k).getPercentagework());
					child.setParent(listOfChild.get(k).getPtaskid());
					child.setIsLeaf(true);
					child.setLevel("2");
					child.setLoaded(true);
					child.setExpanded(false);
					List.add(child);
				}
			}

		}

		jsonResponse.setResult(List);
		return jsonResponse;
	}

	public static Calendar mysqlDateTimeToCalendar(String dateString) {
		try {
			if (dateString.indexOf(".") > -1) {
				dateString = dateString.substring(0, dateString.indexOf("."));
			}
			StringTokenizer tokenizer = new StringTokenizer(dateString, " ");

			String datePart = tokenizer.nextToken();
			String timePart = tokenizer.nextToken();

			tokenizer = new StringTokenizer(datePart, "-");
			String year = tokenizer.nextToken();
			String month = tokenizer.nextToken();
			String day = tokenizer.nextToken();

			tokenizer = new StringTokenizer(timePart, ":");
			String hours = tokenizer.nextToken();
			String minutes = tokenizer.nextToken();
			String seconds = tokenizer.nextToken();

			Calendar date = Calendar.getInstance();
			date.set(Calendar.YEAR, Integer.parseInt(year));
			date.set(Calendar.MONTH, Integer.parseInt(month) - 1);
			date.set(Calendar.DAY_OF_MONTH, Integer.parseInt(day));

			date.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hours));
			date.set(Calendar.MINUTE, Integer.parseInt(minutes));
			date.set(Calendar.SECOND, Integer.parseInt(seconds));
			return date;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@PostMapping(value = "/fetchProjectDetails.web")
	public JsonResponse fetchProjectDetails(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectId = (String) model.get("id");
		String projectJson = restTemplate.getForObject(docURL + "/getProjectById/" + projectId, String.class);
		Mpp project = mapper.readValue(projectJson, Mpp.class);
		jsonResponse.setResult(project);
		return jsonResponse;
	}

	@PostMapping(value = "/fetchAllDetails.web")
	public JsonResponse fetchAllDetails(@RequestBody ModelMap model) throws IOException, ParseException {
		try {
			// exceptionLog.setRequestObject(model);
			JsonResponse jsonResponse = new JsonResponse();
			ObjectMapper mapper = new ObjectMapper();
			RestTemplate restTemplate = new RestTemplate();
			ModelMap newModel = new ModelMap();
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			String projectId = (String) model.get("id");
			String userId = (String) model.get("userid");
			String tablename = null;
			String projectSheetJson = restTemplate.getForObject(docURL + "/getProjectTitleByIdProjectId/" + projectId,
					String.class);
			System.out.println(projectSheetJson);

			List projectsheets = mapper.readValue(projectSheetJson, List.class);

			newModel.addAttribute("tablename", "");
			newModel.addAttribute("projectid", "");
			newModel.addAttribute("category", "");
			ModelMap finalModel = new ModelMap();
			finalModel.addAttribute("noOfTables", projectsheets.size());
			finalModel.addAttribute("tables", projectsheets);
			int n_eng_table = 0;
			int n_pro_table = 0;
			int n_con_table = 0;
			int n_maj_table = 0;
			int n_saf_table = 0;
			int n_qua_table = 0;
			int n_ris_table = 0;
			List<String> eng_table = new ArrayList<String>();
			List<String> pro_table = new ArrayList<String>();
			List<String> con_table = new ArrayList<String>();
			List<String> maj_table = new ArrayList<String>();
			List<String> saf_table = new ArrayList<String>();
			List<String> qua_table = new ArrayList<String>();
			List<String> ris_table = new ArrayList<String>();
			for (int i = 0; i < projectsheets.size(); i++) {
				String[] table_test = projectsheets.get(i).toString().split(",");
				String[] compsdata = table_test[0].split("_");
				tablename = projectId + "_" + table_test[0].toLowerCase();
				System.out.println("tablename" + tablename);
				newModel.put("tablename", tablename);
				String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(newModel);
				HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
				String answer = restTemplate.postForObject(docURL + "/getAllRows", entity, String.class);
				List tableData = mapper.readValue(answer, List.class);
				if (tableData.size() <= 9) {

					if (compsdata[0].equals("engineering")) {
						n_eng_table = n_eng_table + 1;
						eng_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("procurement")) {
						n_pro_table = n_pro_table + 1;
						pro_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("construction")) {
						n_con_table = n_con_table + 1;
						con_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("majormilestone")) {
						n_maj_table = n_maj_table + 1;
						maj_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("quality")) {
						n_qua_table = n_qua_table + 1;
						qua_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("safety")) {
						n_saf_table = n_saf_table + 1;
						saf_table.add(projectsheets.get(i).toString());
					}
					if (compsdata[0].equals("riskmitigation")) {
						n_ris_table = n_ris_table + 1;
						ris_table.add(projectsheets.get(i).toString());
					}

					finalModel.addAttribute(projectsheets.get(i).toString(), tableData);
				} else {
					int datadiv = tableData.size() / 10;
					for (int ii = 0; ii <= datadiv; ii++) {
						if (ii != datadiv) {
							if (compsdata[0].equals("engineering")) {
								n_eng_table = n_eng_table + 1;
								eng_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("procurement")) {
								n_pro_table = n_pro_table + 1;
								pro_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("construction")) {
								n_con_table = n_con_table + 1;
								con_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("majormilestone")) {
								n_maj_table = n_maj_table + 1;
								maj_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("quality")) {
								n_qua_table = n_qua_table + 1;
								qua_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("safety")) {
								n_saf_table = n_saf_table + 1;
								saf_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("riskmitigation")) {
								n_ris_table = n_ris_table + 1;
								ris_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							finalModel.addAttribute(projectsheets.get(i).toString() + "_" + Integer.toString(ii),
									tableData.subList(0, 9));
						} else {
							if (compsdata[0].equals("engineering")) {
								n_eng_table = n_eng_table + 1;
								eng_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("procurement")) {
								n_pro_table = n_pro_table + 1;
								pro_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("construction")) {
								n_con_table = n_con_table + 1;
								con_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("majormilestone")) {
								n_maj_table = n_maj_table + 1;
								maj_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("quality")) {
								n_qua_table = n_qua_table + 1;
								qua_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("safety")) {
								n_saf_table = n_saf_table + 1;
								saf_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							if (compsdata[0].equals("riskmitigation")) {
								n_ris_table = n_ris_table + 1;
								ris_table.add(projectsheets.get(i).toString() + "_" + Integer.toString(ii));
							}
							finalModel.addAttribute(projectsheets.get(i).toString() + "_" + Integer.toString(ii),
									tableData.subList(ii * 9, tableData.size()));
						}
					}
				}
			}

			finalModel.addAttribute("n_eng_table", n_eng_table);
			finalModel.addAttribute("n_pro_table", n_pro_table);
			finalModel.addAttribute("n_con_table", n_con_table);
			finalModel.addAttribute("n_maj_table", n_maj_table);
			finalModel.addAttribute("n_saf_table", n_saf_table);
			finalModel.addAttribute("n_qua_table", n_qua_table);
			finalModel.addAttribute("n_ris_table", n_ris_table);

			finalModel.addAttribute("eng_table", eng_table);
			finalModel.addAttribute("pro_table", pro_table);
			finalModel.addAttribute("con_table", con_table);
			finalModel.addAttribute("maj_table", maj_table);
			finalModel.addAttribute("saf_table", saf_table);
			finalModel.addAttribute("qua_table", qua_table);
			finalModel.addAttribute("ris_table", ris_table);

			String categoryListJson = restTemplate.getForObject(docURL + "/getMasterCategoryList/", String.class);
			List categoryList = mapper.readValue(categoryListJson, List.class);
			newModel.put("projectid", projectId);

			List<String> eng_graph = new ArrayList<String>();
			List<String> pro_graph = new ArrayList<String>();
			List<String> con_graph = new ArrayList<String>();
			List<String> maj_graph = new ArrayList<String>();
			List<String> saf_graph = new ArrayList<String>();
			List<String> qua_graph = new ArrayList<String>();
			List<String> ris_graph = new ArrayList<String>();

			for (int i = 0; i < categoryList.size(); i++) {
				String cat = categoryList.get(i).toString();
				if (cat.equals("Engineering")) {
					String eng_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					eng_graph = mapper.readValue(eng_graphdata, List.class);
				}
				if (cat.equals("Procurement")) {
					String pro_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					pro_graph = mapper.readValue(pro_graphdata, List.class);
				}
				if (cat.equals("Construction")) {
					String con_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					con_graph = mapper.readValue(con_graphdata, List.class);
				}
				if (cat.equals("MajorMilestone")) {
					String maj_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					maj_graph = mapper.readValue(maj_graphdata, List.class);
				}
				if (cat.equals("RiskMitigation")) {
					String ris_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					ris_graph = mapper.readValue(ris_graphdata, List.class);
				}
				if (cat.equals("Quality")) {
					String qua_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					qua_graph = mapper.readValue(qua_graphdata, List.class);
				}
				if (cat.equals("Safety")) {
					String saf_graphdata = restTemplate
							.getForObject(docURL + "/getGraphListByProjectId/" + projectId + "/" + cat, String.class);
					saf_graph = mapper.readValue(saf_graphdata, List.class);
				}

			}

			finalModel.addAttribute("eng_graph", eng_graph);
			finalModel.addAttribute("pro_graph", pro_graph);
			finalModel.addAttribute("con_graph", con_graph);
			finalModel.addAttribute("maj_graph", maj_graph);
			finalModel.addAttribute("saf_graph", saf_graph);
			finalModel.addAttribute("qua_graph", qua_graph);
			finalModel.addAttribute("ris_graph", ris_graph);

			
			//List<GraphData> eng_graph1
			List<GraphData> eng_graph1 = new ArrayList<GraphData>();
			List<GraphData> pro_graph1= new ArrayList<GraphData>();
			List<GraphData> con_graph1 = new ArrayList<GraphData>();
			List<GraphData> maj_graph1 = new ArrayList<GraphData>();
			List<GraphData> saf_graph1 = new ArrayList<GraphData>();
			List<GraphData> qua_graph1 = new ArrayList<GraphData>();
			List<GraphData> ris_graph1 = new ArrayList<GraphData>();
			
			
			String eng_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/Engineering", String.class);
			eng_graph1 = mapper.readValue(eng_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			String pro_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/Procurement", String.class);
			pro_graph1 = mapper.readValue(pro_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			String qua_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/Quality", String.class);
			qua_graph1 = mapper.readValue(qua_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			String saf_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/Safety", String.class);
			saf_graph1 = mapper.readValue(saf_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			String maj_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/MajorMilestone", String.class);
			maj_graph1 = mapper.readValue(maj_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			String con_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/Construction", String.class);
			con_graph1 = mapper.readValue(con_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			String ris_graph1Json = restTemplate.getForObject(docURL + "/getGrphDta/"+projectId+"/RiskMitigation", String.class);
			ris_graph1 = mapper.readValue(ris_graph1Json,
					mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
			
			finalModel.addAttribute("eng_graph1", eng_graph1);
			finalModel.addAttribute("pro_graph1", pro_graph1);
			finalModel.addAttribute("con_graph1", con_graph1);
			finalModel.addAttribute("maj_graph1", maj_graph1);
			finalModel.addAttribute("saf_graph1", saf_graph1);
			finalModel.addAttribute("qua_graph1", qua_graph1);
			finalModel.addAttribute("ris_graph1", ris_graph1);
			
			String imageJson = restTemplate.getForObject(docURL + "/getImageListByProjectId/" + projectId,
					String.class);
			List<String> imageList = mapper.readValue(imageJson, List.class);
			finalModel.addAttribute("images", imageList);

			String videoJson = restTemplate.getForObject(docURL + "/getVideoListByProjectId/" + projectId,
					String.class);
			List<String> videoList = mapper.readValue(videoJson, List.class);
			finalModel.addAttribute("videos", videoList);

			String summaryJson = restTemplate.getForObject(docURL + "/getSummaryByProjectId/" + projectId,
					String.class);
			ProjectSummary summary = mapper.readValue(summaryJson, ProjectSummary.class);
			finalModel.addAttribute("summary1", summary);

			String projectJson = restTemplate.getForObject(docURL + "/Project/" + projectId, String.class);
			Project projectDetails = mapper.readValue(projectJson, Project.class);
			finalModel.addAttribute("projectinfo", projectDetails);

			String intervalByProjectidJson = restTemplate
					.getForObject(docURL + "/getProjectIntervalByProjectId/" + projectId, String.class);
			ProjectInterval projectInterval = mapper.readValue(intervalByProjectidJson, ProjectInterval.class);
			ModelMap modelInteval = new ModelMap();

			modelInteval.addAttribute("projectid", projectInterval.getProjectid().toString());

			if (eng_table.size() > 0 || eng_graph.size() > 0) {
				modelInteval.addAttribute("engineering", projectInterval.getEngineering() * 1000);
			} else {
				modelInteval.addAttribute("engineering", 0);
			}

			if (ris_table.size() > 0 || ris_graph.size() > 0) {
				modelInteval.addAttribute("risk", projectInterval.getRisk() * 1000);
			} else {
				modelInteval.addAttribute("risk", 0);
			}

			if (pro_table.size() > 0 || pro_graph.size() > 0) {
				modelInteval.addAttribute("procurement", projectInterval.getProcurement() * 1000);
			} else {
				modelInteval.addAttribute("procurement", 0);
			}

			if (con_graph.size() > 0 || con_table.size() > 0) {
				modelInteval.addAttribute("construction", projectInterval.getConstruction() * 1000);
			} else {
				modelInteval.addAttribute("construction", 0);
			}

			if (maj_table.size() > 0 || maj_graph.size() > 0) {
				modelInteval.addAttribute("majormilestone", projectInterval.getMajormilestone() * 1000);
			} else {
				modelInteval.addAttribute("majormilestone", 0);
			}

			if (saf_table.size() > 0 || saf_graph.size() > 0) {
				modelInteval.addAttribute("safety", projectInterval.getSafety() * 1000);
			} else {
				modelInteval.addAttribute("safety", 0);
			}

			if (qua_table.size() > 0 || qua_graph.size() > 0) {
				modelInteval.addAttribute("quality", projectInterval.getQuality() * 1000);
			} else {
				modelInteval.addAttribute("quality", 0);
			}

			if (imageList.size() > 0) {
				modelInteval.addAttribute("image", projectInterval.getImage() * 1000);
			} else {
				modelInteval.addAttribute("image", 0);
			}

			if (videoList.size() > 0) {
				modelInteval.addAttribute("video", projectInterval.getVideo() * 1000);
			} else {
				modelInteval.addAttribute("video", 0);
			}

			finalModel.addAttribute("targetinterval", modelInteval);

			ArrayList<TaskTarget> targettasks = new ArrayList();
			if (!projectDetails.getMppid().equals("NA")) {
				targettasks = getTaskFromMpp(projectDetails.getMppid(), projectDetails.getProjectid());
				finalModel.addAttribute("targettask", targettasks);
			} else {
				finalModel.addAttribute("targettask", targettasks);
			}
			jsonResponse.setResult(finalModel);
			return jsonResponse;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/fetchMasterCategory.web")
	public JsonResponse fetchMasterCategory() throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String categoryJson = restTemplate.getForObject(docURL + "/getMasterCategoryList", String.class);
		List<String> category = mapper.readValue(categoryJson, List.class);
		jsonResponse.setResult(category);
		return jsonResponse;
	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/fetchMasterSubCategory.web")
	public JsonResponse fetchMasterSubCategory() throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String subCategoryJson = restTemplate.getForObject(docURL + "/getMasterSubCategoryList", String.class);
		System.out.println(subCategoryJson);
		List<String> subCategory = mapper.readValue(subCategoryJson, List.class);
		jsonResponse.setResult(subCategory);
		return jsonResponse;
	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/fetchProjectList.web")
	public JsonResponse fetchProjectList() throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectJson = restTemplate.getForObject(docURL + "/getProjectList", String.class);
		System.out.println(projectJson);
		List project = mapper.readValue(projectJson, List.class);
		jsonResponse.setResult(project);
		return jsonResponse;
	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/getProjectSheetByProjectId/{id}")
	public JsonResponse getProjectSheetByIdProjectId(@PathVariable("id") String id)
			throws JsonParseException, JsonMappingException, IOException {
		ModelMap errmodel = new ModelMap();
		errmodel.addAttribute("id", id);
		// exceptionLog.setRequestObject(errmodel);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String projectJson = restTemplate.getForObject(docURL + "/getProjectSheetByProjectId/" + id, String.class);
		System.out.println(projectJson);
		List project = mapper.readValue(projectJson, List.class);
		jsonResponse.setResult(project);
		return jsonResponse;
	}

	@PostMapping(value = "/createSheets.web")
	public JsonResponse createSheets(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(model);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/createsheets", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/updateSheets.web")
	public @ResponseBody JsonResponse updateSheets(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ModelMap reqmodel = new ModelMap();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		ArrayList sheetslist = (ArrayList) (model.get("sheets"));
		for (int i = 0; i < sheetslist.size(); i++) {
			String[] projectss = sheetslist.get(i).toString().split("_");
			reqmodel.addAttribute("projectid", model.get("projectname"));
			//reqmodel.addAttribute("category", projectss[0]);
//			if (projectss[0].toString().equalsIgnoreCase("summary")
//					|| projectss[0].toString().equalsIgnoreCase("status")) {
//				reqmodel.addAttribute("subcategory", "NA");
//			} else {
//				reqmodel.addAttribute("subcategory", projectss[1]);
//				reqmodel.addAttribute("decipline", projectss[2]);
//			}
			reqmodel.addAttribute("shtnm", sheetslist.get(i).toString());
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(reqmodel);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			String answer = restTemplate.postForObject(docURL + "/updatesheets", entity, String.class);
			status = mapper.readValue(answer, Status.class);
		}
		status.setCode("CONF01");
		status.setMessage("Successfully Archived");
		jsonResponse.setResult(status);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/createProjectSummary.web")
	public JsonResponse createProjectSummary(@RequestBody ProjectSummary summary) throws IOException {
		// exceptionLog.setRequestObject(summary);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(summary);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/createProjectSummary", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@GetMapping(value = "/helpAnswer/{getid}")
	public JsonResponse helpAnswer(@PathVariable("getid") String getid)
			throws JsonParseException, JsonMappingException, IOException {

		ModelMap errmodel = new ModelMap();
		errmodel.addAttribute("getid", getid);
		// exceptionLog.setRequestObject(errmodel);
		Status st = new Status();
		JsonResponse jsonResponse = new JsonResponse();
		String appMsg = AppMsgReader.getValue(getid);
		if (!appMsg.equals("")) {
			String[] appMsgs = appMsg.split("\\|");
			st.setCode(appMsgs[0]);
			st.setMessage(appMsgs[1]);

		} else {
			st.setCode("No Content");
			st.setMessage("We will be updating our content soon");
		}
		jsonResponse.setResult(st);
		return jsonResponse;
	}

	@PostMapping(value = "/createProjectStatus.web")
	public JsonResponse overallCompletion(@RequestBody Project project) throws IOException {
		// exceptionLog.setRequestObject(project);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);

		String projectJson = restTemplate.getForObject(docURL + "/Project/" + project.getProjectid(), String.class);
		Project projectDetails = mapper.readValue(projectJson, Project.class);
		projectDetails.setOrderplacement(project.getOrderplacement());
		projectDetails.setEngineering(project.getEngineering());
		projectDetails.setSupply(project.getSupply());
		projectDetails.setExecution(project.getExecution());
		projectDetails.setCommissioning(project.getCommissioning());
		projectDetails.setOverallcompletion(project.getOverallcompletion());
		projectDetails.setEng_wt(project.getEng_wt());
		projectDetails.setEng_total(project.getEng_total());
		projectDetails.setOrd_wt(project.getOrd_wt());
		projectDetails.setOrd_total(project.getOrd_total());
		projectDetails.setSup_wt(project.getSup_wt());
		projectDetails.setSup_total(project.getSup_total());
		projectDetails.setExe_wt(project.getExe_wt());
		projectDetails.setExe_total(project.getExe_total());
		projectDetails.setCom_wt(project.getCom_wt());
		projectDetails.setCom_total(project.getCom_total());

		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(projectDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateProject", entity, String.class);
		status = mapper.readValue(answer, Status.class);

		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/getProjectDetails.web")
	public JsonResponse getProjectDetails(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/Project/" + model.get("projectId"), String.class);
		Project projectDetails = mapper.readValue(projectJson, Project.class);
		jsonResponse.setResult(projectDetails);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/updateProjectDetails.web")
	public JsonResponse updateprojectdetails(@RequestBody Project project) throws IOException {
		// exceptionLog.setRequestObject(project);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/Project/" + project.getProjectid(), String.class);
		Project projectDetails = mapper.readValue(projectJson, Project.class);
		String oldprjnm=projectDetails.getProjectname();
		projectDetails.setProjectname(project.getProjectname());
		projectDetails.setProjectdescription(project.getProjectdescription());
		projectDetails.setProjecticon(project.getProjecticon());
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(projectDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateProject", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		
//		FileOutputStream fileOut = new FileOutputStream(mpploc + "/" + project.getProjectid() + "/XLSX/"
//				+ project.getProjectid() + " " + project.getProjectname() + ".xlsx");
		if(status.getMessage().equals("Project Updated Successfully !")){
			
			File oldfile =new File(mpploc + "/" + project.getProjectid() + "/XLSX/"
					+ project.getProjectid() + " " + oldprjnm + ".xlsx");
			File newfile =new File(mpploc + "/" + project.getProjectid() + "/XLSX/"
					+ project.getProjectid() + " " + project.getProjectname() + ".xlsx");
			if(oldfile.renameTo(newfile)){
				System.out.println("Rename succesful");
				ModelMap modl=new ModelMap();
				modl.addAttribute("projectId",  project.getProjectid());
				modl.addAttribute("fileName", project.getProjectid() + " " + project.getProjectname() + ".xlsx");
				String jsonInString1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(modl);
				HttpEntity<String> entity1 = new HttpEntity<String>(jsonInString1, headers);
			    restTemplate.postForObject(docURL + "/updatePsmExcelfilename", entity1, String.class);
				
			}else{
				System.out.println("Rename failed");
			}
		}
		
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/getSummaryDetails.web")
	public JsonResponse getSummaryDetails(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/getSummaryByProjectId/" + model.get("projectId"),
				String.class);
		if(projectJson!=null && !projectJson.isEmpty()) {
			ProjectSummary summaryDetails = mapper.readValue(projectJson, ProjectSummary.class);
			jsonResponse.setResult(summaryDetails);
			System.out.println(jsonResponse);
		}	
		return jsonResponse;
	}

	@PostMapping(value = "/updateProjectSummary.web")
	public JsonResponse updateProjectSummary(@RequestBody ProjectSummary summary) throws IOException {
		// exceptionLog.setRequestObject(summary);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/getSummaryByProjectId/" + summary.getProjectid(),
				String.class);
		ProjectSummary summaryDetails = mapper.readValue(projectJson, ProjectSummary.class);
		if (summaryDetails.getProjectid() != null) {
			String answer = restTemplate.postForObject(docURL + "/createProjectSummaryHistory", summaryDetails, String.class);
			summaryDetails.setApprovedbudget(summary.getApprovedbudget());
			summaryDetails.setReportdate(summary.getReportdate());
			summaryDetails.setReportnumber(summary.getReportnumber());
			summaryDetails.setTdc(summary.getTdc());
			summaryDetails.setAds(summary.getAds());
			summaryDetails.setCtdate(summary.getCtdate());
			summaryDetails.setPoreleased(summary.getPoreleased());
			summaryDetails.setPaymentstatus(summary.getPaymentstatus());
			summaryDetails.setForecstfinish(summary.getForecstfinish());
			summaryDetails.setSchdfinsh(summary.getSchdfinsh());
			summaryDetails.setTotalpo(summary.getTotalpo());
			summaryDetails.setTotalpaymentdone(summary.getTotalpaymentdone());
			summaryDetails.setRevisedbudget(summary.getRevisedbudget()); 
			summaryDetails.setPodetails(summary.getPodetails()); 
			summaryDetails.setBudgetunit(summary.getBudgetunit()); 
			summaryDetails.setRevisedunit(summary.getRevisedunit());
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(summaryDetails);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			 answer = restTemplate.postForObject(docURL + "/updateProjectSummary", entity, String.class);
			status = mapper.readValue(answer, Status.class);
		} else {
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(summary);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			String answer = restTemplate.postForObject(docURL + "/createProjectSummary", entity, String.class);
			status = mapper.readValue(answer, Status.class);
		}

		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/createPlaylist.web")
	public JsonResponse createPlaylist(@RequestBody ModelMap modelMap) throws IOException {
		// exceptionLog.setRequestObject(modelMap);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		PlaylistHeader playlist = new PlaylistHeader();
		playlist.setCreatedby(modelMap.get("createdby").toString());
		playlist.setListmode(modelMap.get("listmode").toString());
		playlist.setPlaylistname(modelMap.get("playlistname").toString());
		playlist.setBrifdescription(modelMap.get("brifdescription").toString());
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(playlist);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/createPlaylistHdr", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		if (status.getCode().startsWith("PLY")) {
			String arrayname[] = modelMap.get("projectid").toString().split(",");
			for (int i = 0; i < arrayname.length; i++) {
				String[] projectid = arrayname[i].split("-");
				String projectid1 = projectid[0].replace("[", "");
				createPlayListDetails(status.getCode(), projectid1.replace(" ", ""));
			}
		}
		jsonResponse.setResult(status);
		System.out.println(status.getCode());
		return jsonResponse;
	}

	private Status createPlayListDetails(String playlisthdrid, String projectid) throws IOException {
		ModelMap errmodel = new ModelMap();
		errmodel.addAttribute("playlisthdrid", playlisthdrid);
		errmodel.addAttribute("projectid", projectid);
		// exceptionLog.setRequestObject(errmodel);
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		PlaylistDetail playlist = new PlaylistDetail();
		playlist.setPlaylisthdrid(playlisthdrid);
		playlist.setProjectid(projectid);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(playlist);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/createPlaylistDtl", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		return status;

	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getPlaylistDetails.web")
	public JsonResponse getPlaylistDetails() throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ModelMap modelMap = new ModelMap();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/Playlisthdr", String.class);
		List<PlaylistHeader> playlistHdrDetails = mapper.readValue(projectJson,
				mapper.getTypeFactory().constructCollectionType(List.class, PlaylistHeader.class));

		ArrayList<HashMap<String, Object>> outer = new ArrayList<HashMap<String, Object>>();
		for (int i = 0; i < playlistHdrDetails.size(); i++) {
			List<String> prjid = new ArrayList<String>();
			String actplay = "<button type = 'button' class='play_btn' data-id ='"
					+ playlistHdrDetails.get(i).getPlaylisthdrid()
					+ "' tittle='Play'><em class='fa fa-play'></em></button>&nbsp;&nbsp;";
			String actEdit = "<button type = 'button' class='edit_btn' data-id ='"
					+ playlistHdrDetails.get(i).getPlaylisthdrid()
					+ "' tittle='Update'><em class='fa fa-edit'></em></button>&nbsp;&nbsp;";
			String actDelete = "<button type = 'button' class='delete_btn' data-id ='"
					+ playlistHdrDetails.get(i).getPlaylisthdrid()
					+ "' tittle='Delete'><em class='fa fa-trash'></em></button>";
			String projectJson1 = restTemplate.getForObject(
					docURL + "/Playlistdtl/" + playlistHdrDetails.get(i).getPlaylisthdrid(), String.class);

			List<PlaylistDetail> playlistdtlDetails = mapper.readValue(projectJson1,
					mapper.getTypeFactory().constructCollectionType(List.class, PlaylistDetail.class));
			for (int k = 0; k < playlistdtlDetails.size(); k++) {
				prjid.add(playlistdtlDetails.get(k).getProjectid());
			}
			HashMap<String, Object> inner = new HashMap<String, Object>();
			inner.put("playlisthdrid", playlistHdrDetails.get(i).getPlaylisthdrid());
			inner.put("playlistname", playlistHdrDetails.get(i).getPlaylistname());
			inner.put("brifdescription", playlistHdrDetails.get(i).getBrifdescription());
			inner.put("listmode", playlistHdrDetails.get(i).getListmode());
			inner.put("projectid", prjid);
			inner.put("action", actplay + actEdit + actDelete);
			inner.put("playedcount", playlistHdrDetails.get(i).getPlayedcount());
			outer.add(inner);
		}

		jsonResponse.setResult(outer);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@GetMapping(value = "/docDetailsByProjectId.web/{id}")
	public JsonResponse docDetailsByProjectId(@PathVariable("id") String projectid)
			throws JsonParseException, JsonMappingException, IOException {
		ModelMap errmodel = new ModelMap();
		errmodel.addAttribute("projectid", projectid);
		// exceptionLog.setRequestObject(errmodel);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		String projectdetailjson = restTemplate.getForObject(docURL + "/Project/" + projectid, String.class);
		Project project = mapper.readValue(projectdetailjson, Project.class);
		if (project.getDocumentid() != null) {
			status.setCode("FILE001");
		} else {
			status.setMessage("Mpp File not Uploaded for this Project");
			status.setCode("ERR001");
		}
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/playlistCountIncrement.web")
	public JsonResponse playlistCountIncrement(@RequestBody PlaylistHeader playlistHeader)
			throws IOException {
		// exceptionLog.setRequestObject(playlistHeader);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/playlistHdrbyID/" + playlistHeader.getPlaylisthdrid(),
				String.class);
		PlaylistHeader playlistHeaderDetails = mapper.readValue(projectJson, PlaylistHeader.class);
		int previouscount = playlistHeaderDetails.getPlayedcount();
		playlistHeaderDetails.setPlayedcount(previouscount + 1);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(playlistHeaderDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updatePlaylistHeader", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/getProjectListById.web")
	public JsonResponse getProjectListById(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		ArrayList<Project> listOfProjects = new ArrayList<>();
		String projectid[] = model.get("projectid").toString().split(",");

		ModelMap responseModel = new ModelMap();
		if (model.get("playertype").equals("default")) {
			String projectListJson = restTemplate.getForObject(docURL + "/Project", String.class);
			listOfProjects = mapper.readValue(projectListJson,
					mapper.getTypeFactory().constructCollectionType(List.class, Project.class));
		} else {

			for (int i = 0; i < projectid.length; i++) {
				String projectJson = restTemplate.getForObject(docURL + "/Project/" + projectid[i], String.class);
				Project projectDetails = mapper.readValue(projectJson, Project.class);
				listOfProjects.add(projectDetails);

			}
		}
		responseModel.addAttribute("projectlist", listOfProjects);
		responseModel.addAttribute("projectlistSize", listOfProjects.size());
		responseModel.addAttribute("projectIdList", model.get("projectid").toString());
		jsonResponse.setResult(responseModel);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/fetchTaskManagementList.web")
	public JsonResponse fetchTaskList(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ArrayList<HashMap<String, Object>> outermodellist = new ArrayList<HashMap<String, Object>>();

		jsonResponse.setResult(outermodellist);
		return jsonResponse;
	}

	@PostMapping(value = "/createAccount.web")
	public JsonResponse createAccount(@RequestBody Account account) throws IOException {
		// exceptionLog.setRequestObject(account);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(account);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(accountURL + "/Account", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		System.out.println(status.getCode());
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/updateProjectArchive")
	public JsonResponse updatearchiveProject(@RequestBody ModelMap modelMap) throws IOException {
		// exceptionLog.setRequestObject(modelMap);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectid = (String) modelMap.get("projectid");
		String asts = (String) modelMap.get("identifier");
		String projectJson = restTemplate.getForObject(docURL + "/Project/" + projectid, String.class);
		Project project = mapper.readValue(projectJson, Project.class);
		if (asts.equals("T")) {
			project.setArchivests(0);
		} else {
			project.setArchivests(1);
		}
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(project);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateProject", entity, String.class);
		Status status = new Status();

		deletePlaylistByProjId(modelMap);

		status.setCode("ARC001");
		status.setMessage("Project archieved successfully");
		jsonResponse.setResult(status);
		return jsonResponse;
		// Hybrid projectMap = new Hybrid();
	}

	@PostMapping(value = "/updateProjectImageArchive")
	public JsonResponse updatearchiveProjectImage(@RequestBody ModelMap modelMap) throws IOException {
		// exceptionLog.setRequestObject(modelMap);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String docid = (String) modelMap.get("imageid");
		String asts = (String) modelMap.get("identifier");
		String projectJson = restTemplate.getForObject(docURL + "/Document/" + docid, String.class);
		DocumentDetails documentDetails = mapper.readValue(projectJson, DocumentDetails.class);
		if (asts.equals("T")) {
			documentDetails.setVersionId(0);
		} else {
			documentDetails.setVersionId(1);
		}
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(documentDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateDoc", entity, String.class);
		Status status = new Status();
		status.setCode("ARC001");
		status.setMessage("Image archieved successfully");
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/saveDocStyle")
	public JsonResponse saveDocStyle(@RequestBody ModelMap modelMap) throws IOException {
		// exceptionLog.setRequestObject(modelMap);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String docid = (String) modelMap.get("docid");
		String projectJson = restTemplate.getForObject(docURL + "/Document/" + docid, String.class);
		DocumentDetails documentDetails = mapper.readValue(projectJson, DocumentDetails.class);
		documentDetails.setDocstyle((String) modelMap.get("docstyle"));
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(documentDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateDoc", entity, String.class);
		Status status = new Status();
		status.setCode("ARC001");
		status.setMessage("Image saved successfully");
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/updateProjectVideoArchive")
	public JsonResponse updatearchiveProjectVideo(@RequestBody ModelMap modelMap) throws IOException {

		// exceptionLog.setRequestObject(modelMap);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String docid = (String) modelMap.get("videoid");
		String asts = (String) modelMap.get("identifier");
		DocumentDetails documentDetails = restTemplate.getForObject(docURL + "/Document/" + docid, DocumentDetails.class);
		//DocumentDetails documentDetails = mapper.readValue(projectJson, DocumentDetails.class);
		if (asts.equals("T")) {
			documentDetails.setVersionId(0);
		} else {
			documentDetails.setVersionId(1);
		}
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(documentDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateDoc", entity, String.class);
		Status status = new Status();
		status.setCode("ARC001");
		status.setMessage("Video archieved successfully");
		jsonResponse.setResult(status);
		return jsonResponse;
	}

	@PostMapping(value = "/getDocListById.web")
	public JsonResponse getDocListById(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectid1[] = model.get("projectid").toString().split("-");
		ModelMap responseModel = new ModelMap();
		List<DocumentDetails> documentDetails = restTemplate
				.getForObject(docURL + "/getDocListById/" + projectid1[0] + "/" + model.get("docType"), List.class);
		/*List<DocumentDetails> documentDetails = mapper.readValue(docJson,
				mapper.getTypeFactory().constructCollectionType(List.class, DocumentDetails.class));*/
		responseModel.addAttribute("allDoclist", documentDetails);
		jsonResponse.setResult(responseModel);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/deletePlaylistByProjId.web")
	public JsonResponse deletePlaylistByProjId(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		Status status = new Status();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String playListJson = restTemplate
				.getForObject(docURL + "/getPlaylistdtlbyPrjId/" + model.get("projectid").toString(), String.class);
		List<PlaylistDetail> playlistDetail = mapper.readValue(playListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, PlaylistDetail.class));

		for (int i = 0; i < playlistDetail.size(); i++) {
			String Childjason = restTemplate.getForObject(
					docURL + "/deleteAllPlaylistdtl/" + playlistDetail.get(i).getPlaylisthdrid(), String.class);
			status = mapper.readValue(Childjason, Status.class);
			if (status.getCode().equalsIgnoreCase("SUCCS_PRO002")) {
				String Parentjason = restTemplate.getForObject(
						docURL + "/deleteAllPlaylistHdr/" + playlistDetail.get(i).getPlaylisthdrid(), String.class);
				status = mapper.readValue(Parentjason, Status.class);
			}
		}
		jsonResponse.setResult(status);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/createInterval")
	public JsonResponse createInterval(@RequestBody ProjectInterval projectInterval) throws IOException {
		// exceptionLog.setRequestObject(projectInterval);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(projectInterval);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/createProjectInterval", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		if (status.getMessage().equals("Project Interval Created Successfully !")) {
			jsonResponse.setResult(status);
		} else {
			status.setCode("ERROR_INTV_01");
			status.setMessage("Project Interval Creation Failed !");
		}
		return jsonResponse;
	}

	@PostMapping(value = "/updateInterval")
	public JsonResponse updateInterval(@RequestBody ProjectInterval projectInterval) throws IOException {
		// exceptionLog.setRequestObject(projectInterval);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(projectInterval);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateProjectInterval", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		if (status.getMessage().equals("Project Interval Updated Successfully !")) {
			jsonResponse.setResult(status);
		} else {
			status.setCode("ERROR_INTV_02");
			status.setMessage("Project Interval Updation Failed !");
		}
		return jsonResponse;
	}

	@GetMapping(value = "/getIntervalByProjectId/{id}")
	public JsonResponse updateInterval(@PathVariable("id") String id) throws IOException {

		ModelMap errmodel = new ModelMap();
		errmodel.addAttribute("id", id);
		// exceptionLog.setRequestObject(errmodel);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ProjectInterval interval = new ProjectInterval();
		String intervalJson = restTemplate.getForObject(docURL + "/getProjectIntervalByProjectId/" + id, String.class);
		interval = mapper.readValue(intervalJson, ProjectInterval.class);
		jsonResponse.setResult(interval);
		return jsonResponse;
	}

	@PostMapping(value = "/getAllMppListById.web")
	public JsonResponse getAllMppListById(@RequestBody ModelMap model)
			throws IOException, ParseException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		ConvertToSQLDate sql = new ConvertToSQLDate();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectId = model.get("projectid").toString();
		String mppID = model.get("mppid").toString();
		List<List<String>> finallist = new ArrayList<List<String>>();

		String projectJson = restTemplate.getForObject(docURL + "/getMppByProjectId/" + projectId + "/" + mppID,
				String.class);
		List project = mapper.readValue(projectJson, List.class);
		String columns = project.get(0).toString().replace("[", "");
		String[] columnsarray = columns.replace("]", "").split(",");
		ArrayList<String> columnsdata = new ArrayList<String>();
		for (int l = 0; l < columnsarray.length - 1; l++) {
			String ll1 = "" + l;
			if (!ll1.equals("0")) {
				columnsdata.add(columnsarray[l].toString().replaceFirst("\\s", "").toUpperCase());
			} else {
				columnsdata.add(columnsarray[l].toString().toUpperCase());
			}
		}
		finallist.add(columnsdata);
		String columnsvalue = project.get(1).toString().replace("[", "");
		String[] columnsValues = columnsvalue.replace("]", "").split("/,");
		ArrayList<String> columnsValues1 = new ArrayList<String>();
		String value = null;
		for (int p = 0; p < columnsValues.length - 1; p++) {
			String pp1 = "" + p;
			if (!pp1.equals("0")) {
				value = columnsValues[p].toString().replaceFirst("\\s", "").replace("/", "");
			} else {
				value = columnsValues[p].toString().replace("/", "");
			}
			if (value.startsWith("Mon ") || value.startsWith("Tue ") || value.startsWith("Wed ") || value.startsWith("Thu ")
					|| value.startsWith("Fri ") || value.startsWith("Sat ") || value.startsWith("Sun ")) {
				value = sql.SQLDateFormatGenerator(value);
				columnsValues1.add(value);
			} else {
				columnsValues1.add(columnsValues[p].toString().replaceFirst("\\s", "").replace("/", ""));
			}
		}
		finallist.add(columnsValues1);
		String taskListJson = restTemplate.getForObject(docURL + "/getParentTaskdtlValue/" + projectId + "/" + mppID,
				String.class);
		List listOfTasks = mapper.readValue(taskListJson, List.class);
		for (int i = 1; i < listOfTasks.size(); i++) {
			String taskresultvalue = listOfTasks.get(i).toString().replace("[", "");
			String[] taskresultvalues = taskresultvalue.replace("]", "").split("/,");
			ArrayList<String> parentdatavalue = new ArrayList<String>();
			for (int a = 0; a < taskresultvalues.length - 1; a++) {
				String aa = "" + a;
				if (!aa.equals("0")) {
					value = taskresultvalues[a].toString().replaceFirst("\\s", "").replace("/", "");
				} else {
					value = taskresultvalues[a].toString().replace("/", "");
				}
				if (value.startsWith("Mon ") || value.startsWith("Tue ") || value.startsWith("Wed ")
						|| value.startsWith("Thu ") || value.startsWith("Fri ") || value.startsWith("Sat ")
						|| value.startsWith("Sun ")) {
					value = sql.SQLDateFormatGenerator(value);
					parentdatavalue.add(value);
				} else {
					parentdatavalue.add(taskresultvalues[a].toString().replaceFirst("\\s", "").replace("/", ""));
				}
			}

			finallist.add(parentdatavalue);
			String taskresultval = listOfTasks.get(i).toString().replace("[", "");
			String[] taskresultarray = taskresultval.replace("]", "").split("/,");
			ArrayList<String> parentdata = new ArrayList<String>();
			for (int m = 0; m < taskresultarray.length; m++) {
				String mm = "" + m;
				if (!mm.equals("0")) {
					parentdata.add(taskresultarray[m].toString().replaceFirst("\\s", "").replace("/", ""));
				} else {
					parentdata.add(taskresultarray[m].toString().replace("/", ""));
				}
			}
			System.out.println(parentdata.get(parentdata.size() - 1).toString());
			String tskid = parentdata.get(parentdata.size() - 1).toString();
			String[] tskID = tskid.split(",");
			System.out.println(tskID[1].toString());
			String childListJson = restTemplate.getForObject(
					docURL + "/getChildtaskdtlValue/" + projectId + "/" + tskID[1].toString(), String.class);
			List listOfChild = mapper.readValue(childListJson, List.class);
			for (int j = 1; j < listOfChild.size(); j++) {

				String childresultvalue = listOfChild.get(j).toString().replace("[", "");
				String[] childresultvalues = childresultvalue.replace("]", "").split("/,");
				ArrayList<String> childdatavalue = new ArrayList<String>();
				for (int b = 0; b < childresultvalues.length - 1; b++) {
					String bb = "" + b;
					if (!bb.equals("0")) {
						value = childresultvalues[b].toString().replaceFirst("\\s", "").replace("/", "");
					} else {
						value = childresultvalues[b].toString().replace("/", "");
					}
					if (value.startsWith("Mon ") || value.startsWith("Tue ") || value.startsWith("Wed ")
							|| value.startsWith("Thu ") || value.startsWith("Fri ") || value.startsWith("Sat ")
							|| value.startsWith("Sun ")) {
						System.out.println("childresultvalue : "+childresultvalue);
						value = sql.SQLDateFormatGenerator(value);
						childdatavalue.add(value);
					} else {
						childdatavalue.add(childresultvalues[b].toString().replaceFirst("\\s", "").replace("/", ""));
					}
				}
				finallist.add(childdatavalue);

			}
		}
		jsonResponse.setResult(finallist);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ArrayList<TaskTarget> getTaskFromMpp(String mppid, String projectid) throws IOException, ParseException {
		ModelMap modelmap = new ModelMap();
		modelmap.addAttribute("projectid", projectid);
		modelmap.addAttribute("mppid", mppid);
		ArrayList<TaskTarget> finalList = new ArrayList<TaskTarget>();
		ArrayList<TaskTarget> bfinalList = new ArrayList<TaskTarget>();
		ArrayList<TaskTarget> gfinalList = new ArrayList<TaskTarget>();
		ArrayList<TaskTarget> yfinalList = new ArrayList<TaskTarget>();
		ArrayList<TaskTarget> rfinalList = new ArrayList<TaskTarget>();
		ArrayList<Hybrid> resultlist = new ArrayList<Hybrid>();
		JsonResponse jsonResponse = new JsonResponse();
		jsonResponse = getProjectDetailsById(modelmap);
		resultlist = (ArrayList<Hybrid>) jsonResponse.getResult();

		java.util.Date now = new java.util.Date();
		java.sql.Date sqlDate = new java.sql.Date(now.getTime());
		java.sql.Date sqlDate1 = new java.sql.Date(now.getTime());
		Calendar cal = Calendar.getInstance();
		cal.setTime(sqlDate1);
		cal.add(Calendar.DAY_OF_YEAR, 1);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);

		int s = 0;
		int h = 0;
		int b = 0;
		int g = 0;
		int y = 0;
		int r = 0;

		for (int i = 0; i < resultlist.size(); i++) {
				if(resultlist.get(i).getAf() !=null && resultlist.get(i).getAs() !=null){
			  if (resultlist.get(i).getLevel() != null
					&& (resultlist.get(i).getAf().equals("NA") && !resultlist.get(i).getLevel().startsWith("level"))) {
				s++;
				Hybrid hyn = new Hybrid();
				hyn = resultlist.get(i);
				System.out.println("ES  " + hyn.getStart());
				System.out.println("EF  " + hyn.getFinish());
				System.out.println("AS  " + hyn.getActualstart());
				System.out.println("AF  " + hyn.getActualfinish());
				System.out.println("getAs  " + hyn.getAs());
				System.out.println("getAf  " + hyn.getAf());
				if (resultlist.get(i).getStart() != null && resultlist.get(i).getFinish() != null) {
					System.out.println("CD " + sqlDate);
					h++;
					// Black
					if (sqlDate.toString().equals(resultlist.get(i).getStart().toString())
							&& sqlDate.toString().equals(resultlist.get(i).getFinish().toString())
							&& resultlist.get(i).getAs().equals("NA")) {
						TaskTarget tasktarget = new TaskTarget();
						tasktarget.setTaskid(resultlist.get(i).getTaskid());
						tasktarget.setTasktype("Today");
						tasktarget.setTaskname(resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());
						System.out.println("Task " + resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());
						System.out.println("Black Task ");
						tasktarget.setStartdate(resultlist.get(i).getStart());
						tasktarget.setEnddate(resultlist.get(i).getFinish());

						if (resultlist.get(i).getAs().equals("A")) {
							tasktarget.setAstartdate(resultlist.get(i).getActualstart());
						}

						tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
						tasktarget.setStatus("B");
						finalList.add(tasktarget);
						b++;
					}
					// Green
					else if (sqlDate.toString().equals(resultlist.get(i).getStart().toString())
							&& (resultlist.get(i).getFinish().after(sqlDate)
									&& resultlist.get(i).getAs().equals("NA"))) {
						TaskTarget tasktarget = new TaskTarget();
						tasktarget.setTaskid(resultlist.get(i).getTaskid());
						tasktarget.setTasktype("Today");
						tasktarget.setTaskname(resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());

						System.out.println(
								"Task " + resultlist.get(i).getLevel() + " - " + resultlist.get(i).getTaskname());
						System.out.println("Green Task ");

						tasktarget.setStartdate(resultlist.get(i).getStart());
						tasktarget.setEnddate(resultlist.get(i).getFinish());

						if (resultlist.get(i).getAs().equals("A")) {
							tasktarget.setAstartdate(resultlist.get(i).getActualstart());
						}

						tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
						tasktarget.setStatus("G");
						finalList.add(tasktarget);
						g++;
					}
					// Yelow
					else if ((sqlDate.after(resultlist.get(i).getStart()))
							&& (resultlist.get(i).getFinish().after(sqlDate)
									&& !resultlist.get(i).getAs().equals("NA"))) {

						TaskTarget tasktarget = new TaskTarget();
						tasktarget.setTaskid(resultlist.get(i).getTaskid());
						tasktarget.setTasktype("Progress");
						tasktarget.setTaskname(resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());

						System.out.println(
								"Task " + resultlist.get(i).getLevel() + " - " + resultlist.get(i).getTaskname());
						System.out.println("Yellow Task ");

						tasktarget.setStartdate(resultlist.get(i).getStart());
						tasktarget.setEnddate(resultlist.get(i).getFinish());

						if (resultlist.get(i).getAs().equals("A")) {
							tasktarget.setAstartdate(resultlist.get(i).getActualstart());
						}

						tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
						tasktarget.setStatus("Y");
						finalList.add(tasktarget);
						y++;
					}
					// Red
					else if (sqlDate.after(resultlist.get(i).getStart()) && resultlist.get(i).getAs().equals("NA")) {// System.out.println("reds
																														// "+resultlist.get(i).getTaskname());
						TaskTarget tasktarget = new TaskTarget();
						tasktarget.setTaskid(resultlist.get(i).getTaskid());
						tasktarget.setTasktype("Delayed");
						tasktarget.setTaskname(resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());

						System.out.println(
								"Task " + resultlist.get(i).getLevel() + " - " + resultlist.get(i).getTaskname());
						System.out.println("Red Task ");

						tasktarget.setStartdate(resultlist.get(i).getStart());
						tasktarget.setEnddate(resultlist.get(i).getFinish());

						if (resultlist.get(i).getAs().equals("A")) {
							tasktarget.setAstartdate(resultlist.get(i).getActualstart());
						}

						tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
						tasktarget.setStatus("R");
						finalList.add(tasktarget);
						r++;
					} else if (sqlDate.after(resultlist.get(i).getFinish())
							&& !resultlist.get(i).getAs().equals("NA")) {// System.out.println("reds
																			// "+resultlist.get(i).getTaskname());
						TaskTarget tasktarget = new TaskTarget();
						tasktarget.setTaskid(resultlist.get(i).getTaskid());
						tasktarget.setTasktype("Delayed");
						tasktarget.setTaskname(resultlist.get(i).getLevel().toString().toUpperCase() + " - "
								+ resultlist.get(i).getTaskname());

						System.out.println(
								"Task " + resultlist.get(i).getLevel() + " - " + resultlist.get(i).getTaskname());
						System.out.println("Red Task ");

						tasktarget.setStartdate(resultlist.get(i).getStart());
						tasktarget.setEnddate(resultlist.get(i).getFinish());

						if (resultlist.get(i).getAs().equals("A")) {
							tasktarget.setAstartdate(resultlist.get(i).getActualstart());
						}

						tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
						tasktarget.setStatus("R");
						finalList.add(tasktarget);
						r++;
					}

				}
			} else {
				if (resultlist.get(i).getAf().equals("NA")) {
					s++;
					Hybrid hyn = new Hybrid();
					hyn = resultlist.get(i);
					System.out.println("ES  " + hyn.getStart());
					System.out.println("EF  " + hyn.getFinish());
					System.out.println("AS  " + hyn.getActualstart());
					System.out.println("AF  " + hyn.getActualfinish());
					System.out.println("getAs  " + hyn.getAs());
					System.out.println("getAf  " + hyn.getAf());
					if (resultlist.get(i).getStart() != null && resultlist.get(i).getFinish() != null) {
						System.out.println("CD " + sqlDate);
						h++;
						// Black
						if (sqlDate.toString().equals(resultlist.get(i).getStart().toString())
								&& sqlDate.toString().equals(resultlist.get(i).getFinish().toString())
								&& resultlist.get(i).getAs().equals("NA")) {
							TaskTarget tasktarget = new TaskTarget();
							tasktarget.setTaskid(resultlist.get(i).getTaskid());
							tasktarget.setTasktype("Today");
							tasktarget.setTaskname(resultlist.get(i).getTaskname());
							System.out.println("Task " + resultlist.get(i).getTaskname());
							System.out.println("Black Task ");
							tasktarget.setStartdate(resultlist.get(i).getStart());
							tasktarget.setEnddate(resultlist.get(i).getFinish());

							if (resultlist.get(i).getAs().equals("A")) {
								tasktarget.setAstartdate(resultlist.get(i).getActualstart());
							}

							tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
							tasktarget.setStatus("B");
							finalList.add(tasktarget);
							b++;
						}
						// Green
						else if (sqlDate.toString().equals(resultlist.get(i).getStart().toString())
								&& (resultlist.get(i).getFinish().after(sqlDate)
										&& resultlist.get(i).getAs().equals("NA"))) {
							TaskTarget tasktarget = new TaskTarget();
							tasktarget.setTaskid(resultlist.get(i).getTaskid());
							tasktarget.setTasktype("Today");
							tasktarget.setTaskname(resultlist.get(i).getTaskname());
							System.out.println("Task " + resultlist.get(i).getTaskname());
							System.out.println("Green Task ");

							tasktarget.setStartdate(resultlist.get(i).getStart());
							tasktarget.setEnddate(resultlist.get(i).getFinish());

							if (resultlist.get(i).getAs().equals("A")) {
								tasktarget.setAstartdate(resultlist.get(i).getActualstart());
							}

							tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
							tasktarget.setStatus("G");
							finalList.add(tasktarget);
							g++;
						}
						// Yelow
						else if ((sqlDate.after(resultlist.get(i).getStart()))
								&& (resultlist.get(i).getFinish().after(sqlDate)
										&& !resultlist.get(i).getAs().equals("NA"))) {

							TaskTarget tasktarget = new TaskTarget();
							tasktarget.setTaskid(resultlist.get(i).getTaskid());
							tasktarget.setTasktype("Progress");
							tasktarget.setTaskname(resultlist.get(i).getTaskname());
							System.out.println("Task " + resultlist.get(i).getTaskname());
							System.out.println("Yellow Task ");

							tasktarget.setStartdate(resultlist.get(i).getStart());
							tasktarget.setEnddate(resultlist.get(i).getFinish());

							if (resultlist.get(i).getAs().equals("A")) {
								tasktarget.setAstartdate(resultlist.get(i).getActualstart());
							}

							tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
							tasktarget.setStatus("Y");
							finalList.add(tasktarget);
							y++;
						}
						// Red
						else if (sqlDate.after(resultlist.get(i).getStart())
								&& resultlist.get(i).getAs().equals("NA")) {// System.out.println("reds
																			// "+resultlist.get(i).getTaskname());
							TaskTarget tasktarget = new TaskTarget();
							tasktarget.setTaskid(resultlist.get(i).getTaskid());
							tasktarget.setTasktype("Delayed");
							tasktarget.setTaskname(resultlist.get(i).getTaskname());
							System.out.println("Task " + resultlist.get(i).getTaskname());
							System.out.println("Red Task ");

							tasktarget.setStartdate(resultlist.get(i).getStart());
							tasktarget.setEnddate(resultlist.get(i).getFinish());

							if (resultlist.get(i).getAs().equals("A")) {
								tasktarget.setAstartdate(resultlist.get(i).getActualstart());
							}

							tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
							tasktarget.setStatus("R");
							finalList.add(tasktarget);
							r++;
						} else if (sqlDate.after(resultlist.get(i).getFinish())
								&& !resultlist.get(i).getAs().equals("NA")) {// System.out.println("reds
																				// "+resultlist.get(i).getTaskname());
							TaskTarget tasktarget = new TaskTarget();
							tasktarget.setTaskid(resultlist.get(i).getTaskid());
							tasktarget.setTasktype("Delayed");
							tasktarget.setTaskname(resultlist.get(i).getTaskname());
							System.out.println("Task " + resultlist.get(i).getTaskname());
							System.out.println("Red Task ");

							tasktarget.setStartdate(resultlist.get(i).getStart());
							tasktarget.setEnddate(resultlist.get(i).getFinish());

							if (resultlist.get(i).getAs().equals("A")) {
								tasktarget.setAstartdate(resultlist.get(i).getActualstart());
							}

							tasktarget.setReponibleperon(resultlist.get(i).getResourcename());
							tasktarget.setStatus("R");
							finalList.add(tasktarget);
							r++;
						}

					}

				}
			}
		}
		}
		System.out.println("----------------------------------------");
		System.out.println("--------------First Level -" + s + "-------------------------");
		System.out.println("--------------2nd Level -" + h + "-------------------------");
		System.out.println("--------------yellow -" + y + "-------------------------");
		System.out.println("--------------red -" + r + "------------------------");
		System.out.println("--------------black -" + b + "------------------------");
		System.out.println("--------------green -" + g + "------------------------");
		return finalList;
	}

	@PostMapping(value = "/getProjectDetailsById.web")
	public JsonResponse getProjectDetailsById(@RequestBody ModelMap model)
			throws IOException, ParseException {
		// exceptionLog.setRequestObject(model);
		ArrayList<Hybrid> List = new ArrayList<Hybrid>();
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ConvertToSQLDate dateConverter = new ConvertToSQLDate();
		String mppid = (String) model.get("mppid");
		String projectId = (String) model.get("projectid");
		String projectJson = restTemplate.getForObject(docURL + "/getMppByProjectId/" + projectId + "/" + mppid,
				String.class);

		List project = mapper.readValue(projectJson, List.class);

		String columns = project.get(0).toString().replace("[", "");
		String[] columnsarray = columns.replace("]", "").split(",");
		ArrayList<String> columnListDATA = new ArrayList<String>();
		for (int p = 0; p < columnsarray.length; p++) {
			String pp = "" + p;
			if (!pp.equals("0")) {
				columnListDATA.add(columnsarray[p].toString().replaceFirst("\\s", ""));
			} else {
				columnListDATA.add(columnsarray[p].toString());
			}
		}
		String resultval = project.get(1).toString().replace("[", "");
		String[] resultarray = resultval.replace("]", "").split("/,");
		ArrayList<String> mppdata = new ArrayList<String>();
		for (int p = 0; p < resultarray.length; p++) {
			String pp1 = "" + p;
			if (!pp1.equals("0")) {
				mppdata.add(resultarray[p].toString().replaceFirst("\\s", "").replace("/", ""));
			} else {
				mppdata.add(resultarray[p].toString().replace("/", ""));
			}
		}

		Hybrid projectMap = new Hybrid();
		projectMap.setProjectid(projectId);
		if (columnListDATA.contains("ID")) {
			projectMap.setSerialnumber(Integer.parseInt(mppdata.get(columnListDATA.indexOf("ID")).toString()));
		}
		if (columnListDATA.contains("Task Name")) {
			projectMap.setProjectname(mppdata.get(columnListDATA.indexOf("Task Name")).toString());
			projectMap.setTaskname(mppdata.get(columnListDATA.indexOf("Task Name")).toString());
		}
		if (columnListDATA.contains("Discipline")) {
			projectMap.setLevel(mppdata.get(columnListDATA.indexOf("Discipline")).toString().toLowerCase());
		}
		if (columnListDATA.contains("Duration")) {
			projectMap.setDuration(mppdata.get(columnListDATA.indexOf("Duration")).toString());
		}
		if (columnListDATA.contains("Estimated Start")) {
			if (mppdata.get(columnListDATA.indexOf("Estimated Start")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Estimated Start")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Estimated Start")).toString());
					projectMap.setStart(Date.valueOf(newDate));
				}
			}
		}

		if (columnListDATA.contains("Estimated Finish")) {
			if (mppdata.get(columnListDATA.indexOf("Estimated Finish")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Estimated Finish")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Estimated Finish")).toString());
					projectMap.setFinish(Date.valueOf(newDate));
				}
			}
		}
		if (columnListDATA.contains("Actual Start")) {
			if (mppdata.get(columnListDATA.indexOf("Actual Start")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Actual Start")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Actual Start")).toString());
					projectMap.setActualstart(Date.valueOf(newDate));
					projectMap.setAs("A");
				} else {
					String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
					projectMap.setActualstart(Date.valueOf(newDate));
					projectMap.setAs("NA");
				}
			}
		}
		if (columnListDATA.contains("Actual/Expec Start")) {
			if (mppdata.get(columnListDATA.indexOf("Actual/Expec Start")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString());
					projectMap.setActualstart(Date.valueOf(newDate));
					projectMap.setAs("A");
				} else {
					String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
					projectMap.setActualstart(Date.valueOf(newDate));
					projectMap.setAs("NA");
				}
			}
		}
		if (columnListDATA.contains("Actual Finish")) {
			if (mppdata.get(columnListDATA.indexOf("Actual Finish")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Actual Finish")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Actual Finish")).toString());
					System.out.println("Actual Finish " + newDate);
					projectMap.setActualfinish(Date.valueOf(newDate));
					projectMap.setAf("A");
				} else {
					projectMap.setAf("NA");
				}
			}
		}
		if (columnListDATA.contains("Actual/Expec Finish")) {
			if (mppdata.get(columnListDATA.indexOf("Actual/Expec Finish")) != null) {
				if (!mppdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString().equals("NA")) {
					String newDate = dateConverter
							.SQLDateFormatGenerator(mppdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString());
					System.out.println("Actual Finish " + newDate);
					projectMap.setActualfinish(Date.valueOf(newDate));
					projectMap.setAf("A");
				} else {
					projectMap.setAf("NA");
				}
			}
		}
		projectMap.setTotalslack("NA");

		if (columnListDATA.contains("% Complete")) {
			projectMap.setPercentagework(mppdata.get(columnListDATA.indexOf("% Complete")));
		}
		if (columnListDATA.contains("Line Manager")) {
			projectMap.setResourcename(mppdata.get(columnListDATA.indexOf("Line Manager")));
		}
		projectMap.setParent(null);
		projectMap.setIsLeaf(false);
		projectMap.setLoaded(true);
		projectMap.setExpanded(false);
		List.add(projectMap);
		String taskListJson = restTemplate.getForObject(docURL + "/getParentTaskdtlValue/" + projectId + "/" + mppid,
				String.class);
		List listOfTasks = mapper.readValue(taskListJson, List.class);

		for (int j = 1; j < listOfTasks.size(); j++) {

			String taskresultval = listOfTasks.get(j).toString().replace("[", "");
			String[] taskresultarray = taskresultval.replace("]", "").split("/,");
			ArrayList<String> parentdata = new ArrayList<String>();
			for (int m = 0; m < taskresultarray.length; m++) {
				String mm1 = "" + m;
				if (!mm1.equals("0")) {
					parentdata.add(taskresultarray[m].toString().replaceFirst("\\s", "").replace("/", ""));
				} else {
					parentdata.add(taskresultarray[m].toString().replace("/", ""));
				}
			}
			Hybrid task = new Hybrid();

			task.setProjectid(projectId);
			if (columnListDATA.contains("ID")) {
				task.setSerialnumber(Integer.parseInt(parentdata.get(columnListDATA.indexOf("ID")).toString()));
			}
			if (columnListDATA.contains("Task Name")) {
				task.setProjectname(mppdata.get(columnListDATA.indexOf("Task Name")).toString());
				task.setTaskname(parentdata.get(columnListDATA.indexOf("Task Name")).toString());
			}
			if (columnListDATA.contains("Discipline")) {
				task.setLevel(parentdata.get(columnListDATA.indexOf("Discipline")).toString().toLowerCase());
			}
			if (columnListDATA.contains("Duration")) {
				task.setDuration(parentdata.get(columnListDATA.indexOf("Duration")).toString());
			}
			if (columnListDATA.contains("Estimated Start")) {
				if (parentdata.get(columnListDATA.indexOf("Estimated Start")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Estimated Start")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Estimated Start")).toString());
						task.setStart(Date.valueOf(newDate));
					}
				}
			}
			if (columnListDATA.contains("Estimated Finish")) {
				if (parentdata.get(columnListDATA.indexOf("Estimated Finish")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Estimated Finish")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Estimated Finish")).toString());
						task.setFinish(Date.valueOf(newDate));
					}
				}
			}
			if (columnListDATA.contains("Actual Start")) {
				if (parentdata.get(columnListDATA.indexOf("Actual Start")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Actual Start")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Actual Start")).toString());
						task.setActualstart(Date.valueOf(newDate));
						task.setAs("A");
					} else {
						String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
						task.setActualstart(Date.valueOf(newDate));
						task.setAs("NA");
					}
				}
			}
			if (columnListDATA.contains("Actual/Expec Start")) {
				if (parentdata.get(columnListDATA.indexOf("Actual/Expec Start")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString());
						task.setActualstart(Date.valueOf(newDate));
						task.setAs("A");
					} else {
						String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
						task.setActualstart(Date.valueOf(newDate));
						task.setAs("NA");
					}
				}
			}
			if (columnListDATA.contains("Actual Finish")) {
				if (parentdata.get(columnListDATA.indexOf("Actual Finish")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Actual Finish")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Actual Finish")).toString());
						// System.out.println("Actual Finish "+newDate);
						task.setActualfinish(Date.valueOf(newDate));
						task.setAf("A");
					} else {
						task.setAf("NA");
					}
				}
			}
			if (columnListDATA.contains("Actual/Expec Finish")) {
				if (parentdata.get(columnListDATA.indexOf("Actual/Expec Finish")) != null) {
					if (!parentdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString().equals("NA")) {
						String newDate = dateConverter.SQLDateFormatGenerator(
								parentdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString());
						// System.out.println("Actual Finish "+newDate);
						task.setActualfinish(Date.valueOf(newDate));
						task.setAf("A");
					} else {
						task.setAf("NA");
					}
				}
			}
			task.setTotalslack("NA");

			if (columnListDATA.contains("% Complete")) {
				task.setPercentagework(parentdata.get(columnListDATA.indexOf("% Complete")));
			}
			if (columnListDATA.contains("Line Manager")) {
				task.setResourcename(parentdata.get(columnListDATA.indexOf("Line Manager")));
			}
			task.setParent(null);
			task.setIsLeaf(false);
			task.setLoaded(true);
			task.setExpanded(false);
			String tskid = parentdata.get(parentdata.size() - 1).toString();
			String[] tskID = tskid.split(",");
			System.out.println(tskID[1].toString());
			task.setTaskid(tskID[1].toString());

			List.add(task);

			String childListJson = restTemplate.getForObject(
					docURL + "/getChildtaskdtlValue/" + projectId + "/" + tskID[1].toString(), String.class);
			List listOfChild = mapper.readValue(childListJson, List.class);

			for (int k = 1; k < listOfChild.size(); k++) {
				Hybrid child = new Hybrid();

				String childresultval = listOfChild.get(k).toString().replace("[", "");
				String[] childresultarray = childresultval.replace("]", "").split("/,");
				ArrayList<String> childdata = new ArrayList<String>();
				for (int n = 0; n < childresultarray.length; n++) {
					String nn1 = "" + n;
					if (!nn1.equals("0")) {
						childdata.add(childresultarray[n].toString().replaceFirst("\\s", "").replace("/", ""));
					} else {
						childdata.add(childresultarray[n].toString().replace("/", ""));
					}
				}
				child.setProjectid(projectId);
				if (columnListDATA.contains("ID")) {
					child.setSerialnumber(Integer.parseInt(childdata.get(columnListDATA.indexOf("ID")).toString()));
				}
				if (columnListDATA.contains("Task Name")) {
					child.setProjectname(mppdata.get(columnListDATA.indexOf("Task Name")).toString());
					child.setTaskname(childdata.get(columnListDATA.indexOf("Task Name")).toString());
				}
				if (columnListDATA.contains("Discipline")) {
					child.setLevel(childdata.get(columnListDATA.indexOf("Discipline")).toString().toLowerCase());
				}
				if (columnListDATA.contains("Duration")) {
					child.setDuration(childdata.get(columnListDATA.indexOf("Duration")).toString());
				}
				if (columnListDATA.contains("Estimated Start")) {
					if (childdata.get(columnListDATA.indexOf("Estimated Start")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Estimated Start")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Estimated Start")).toString());
							child.setStart(Date.valueOf(newDate));
						}
					}
				}
				if (columnListDATA.contains("Estimated Finish")) {
					if (childdata.get(columnListDATA.indexOf("Estimated Finish")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Estimated Finish")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Estimated Finish")).toString());
							child.setFinish(Date.valueOf(newDate));
							System.out.println("fdgdfg" + child.getFinish());
						}
					}
				}
				if (columnListDATA.contains("Actual Start")) {
					if (childdata.get(columnListDATA.indexOf("Actual Start")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Actual Start")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Actual Start")).toString());
							child.setActualstart(Date.valueOf(newDate));
							child.setAs("A");
						} else {
							String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
							child.setActualstart(Date.valueOf(newDate));
							child.setAs("NA");
						}
					}
				}
				if (columnListDATA.contains("Actual/Expec Start")) {
					if (childdata.get(columnListDATA.indexOf("Actual/Expec Start")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Actual/Expec Start")).toString());
							child.setActualstart(Date.valueOf(newDate));
							child.setAs("A");
						} else {
							String newDate = dateConverter.SQLDateFormatGenerator("Tue May 01 09:00:00 IST 1990");
							child.setActualstart(Date.valueOf(newDate));
							child.setAs("NA");
						}
					}
				}
				if (columnListDATA.contains("Actual Finish")) {
					if (childdata.get(columnListDATA.indexOf("Actual Finish")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Actual Finish")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Actual Finish")).toString());
							child.setActualfinish(Date.valueOf(newDate));
							child.setAf("A");
						} else {
							child.setAf("NA");
						}
					}
				}
				if (columnListDATA.contains("Actual/Expec Finish")) {
					if (childdata.get(columnListDATA.indexOf("Actual/Expec Finish")) != null) {
						if (!childdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString().equals("NA")) {
							String newDate = dateConverter.SQLDateFormatGenerator(
									childdata.get(columnListDATA.indexOf("Actual/Expec Finish")).toString());
							child.setActualfinish(Date.valueOf(newDate));
							child.setAf("A");
						} else {
							child.setAf("NA");
						}
					}
				}
				child.setTotalslack("NA");

				String cdhid = childdata.get(childdata.size() - 1).toString();
				String[] chdID = cdhid.split(",");
				child.setPtaskid(chdID[1].toString());
				child.setTaskid(chdID[2].toString());
				if (columnListDATA.contains("% Complete")) {
					child.setPercentagework(childdata.get(columnListDATA.indexOf("% Complete")));
				}
				if (columnListDATA.contains("Line Manager")) {
					child.setResourcename(childdata.get(columnListDATA.indexOf("Line Manager")));
				}
				child.setParent(null);
				child.setIsLeaf(false);
				child.setLoaded(true);
				child.setExpanded(false);
				List.add(child);
			}
		}
		jsonResponse.setResult(List);
		return jsonResponse;

	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/getColumnList.web")
	public JsonResponse getColumnList() throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		String columnListJson = restTemplate.getForObject(docURL + "/getColumns", String.class);
		List<String> columnlist = mapper.readValue(columnListJson, List.class);
		jsonResponse.setResult(columnlist);
		return jsonResponse;
	}

	@PostMapping(value = "/getPlaylistDetailsById.web")
	public JsonResponse getPlaylistDetailsbyId(@RequestBody ModelMap model) throws IOException {
		JsonResponse jsonResponse = new JsonResponse();
		ModelMap responsemodel = new ModelMap();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate.getForObject(docURL + "/playlistHdrbyID/" + model.get("playlisthdrid"),
				String.class);
		PlaylistHeader playlistHdrDetails = mapper.readValue(projectJson, PlaylistHeader.class);

		String projectJson1 = restTemplate.getForObject(docURL + "/Playlistdtl/" + model.get("playlisthdrid"),
				String.class);
		List<PlaylistDetail> playlistdtlDetails = mapper.readValue(projectJson1,
				mapper.getTypeFactory().constructCollectionType(List.class, PlaylistDetail.class));
		List<String> prjid = new ArrayList<String>();

		for (int k = 0; k < playlistdtlDetails.size(); k++) {
			prjid.add(playlistdtlDetails.get(k).getProjectid());
		}

		responsemodel.addAttribute("playlisthdrid", playlistHdrDetails.getPlaylisthdrid());
		responsemodel.addAttribute("playlistname", playlistHdrDetails.getPlaylistname());
		responsemodel.addAttribute("brifdescription", playlistHdrDetails.getBrifdescription());
		responsemodel.addAttribute("listmode", playlistHdrDetails.getListmode());
		responsemodel.addAttribute("projectid", prjid);
		responsemodel.addAttribute("playedcount", playlistHdrDetails.getPlayedcount());

		jsonResponse.setResult(responsemodel);
		System.out.println(jsonResponse);
		return jsonResponse;
	}

	@PostMapping(value = "/updatePlaylist.web")
	public JsonResponse updatePlaylist(@RequestBody ModelMap modelMap) throws IOException {
		// exceptionLog.setRequestObject(modelMap);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String projectJson = restTemplate
				.getForObject(docURL + "/playlistHdrbyID/" + modelMap.get("playlisthdrid").toString(), String.class);
		PlaylistHeader playlistHdrDetails = mapper.readValue(projectJson, PlaylistHeader.class);
		playlistHdrDetails.setListmode(modelMap.get("listmode").toString());
		playlistHdrDetails.setPlaylistname(modelMap.get("playlistname").toString());
		playlistHdrDetails.setBrifdescription(modelMap.get("brifdescription").toString());
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(playlistHdrDetails);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updatePlaylistHeader", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		if (status.getMessage().equals("Playlist Updated Successfully !")) {

			String answer1 = restTemplate.postForObject(docURL + "/deleteAllPlaylistdtl", modelMap, String.class);
			status = mapper.readValue(answer1, Status.class);
			if (status.getCode().equals("SUCCS_PRO002")) {
				String arrayname[] = modelMap.get("projectid").toString().split(",");
				for (int i = 0; i < arrayname.length; i++) {
					String[] projectid = arrayname[i].split("-");
					String projectid1 = projectid[0].replace("[", "");
					System.out.println(projectid1.replace(" ", ""));
					createPlayListDetails(modelMap.get("playlisthdrid").toString(), projectid1.replace(" ", ""));
				}
				status.setCode("PLY01");
				status.setMessage("PLAYLIST Updated Successfully");
			}

		}

		jsonResponse.setResult(status);
		System.out.println(status.getCode());
		return jsonResponse;
	}

	/*
	 * @RequestMapping(value = "/getAllContractorList.web", method =
	 * RequestMethod.GET) public @ResponseBody JsonResponse
	 * getAllContractorList() throws IOException, SQLException { JsonResponse
	 * jsonResponse = new JsonResponse(); ModelMap model = new ModelMap();
	 * List<ModelMap> al = new ArrayList<ModelMap>(); ModelAndView modelview =
	 * new ModelAndView(); ModelMap c1 = new ModelMap();
	 * c1.addAttribute("contractorId", "RFID00001");
	 * c1.addAttribute("contractorname", "C1"); al.add(0, c1); ModelMap c2 = new
	 * ModelMap(); c2.addAttribute("contractorId", "RFID00002");
	 * c2.addAttribute("contractorname", "C2"); al.add(1, c2); ModelMap c3 = new
	 * ModelMap(); c3.addAttribute("contractorId", "RFID00003");
	 * c3.addAttribute("contractorname", "C3"); al.add(2, c3); ModelMap c4 = new
	 * ModelMap(); c4.addAttribute("contractorId", "RFID00004");
	 * c4.addAttribute("contractorname", "C4"); al.add(3, c4);
	 * model.addAttribute("contractordetails", al);
	 * model.addAttribute("totalcontractorcounr", "4");
	 * jsonResponse.setResult(new ModelAndView("GetAllContractor", "command",
	 * model)); return jsonResponse; }
	 * 
	 * @RequestMapping(value = "/getAllLabourList.web", method =
	 * RequestMethod.GET) public @ResponseBody JsonResponse getAllLabourList()
	 * throws IOException, SQLException { JsonResponse jsonResponse = new
	 * JsonResponse(); ModelMap model = new ModelMap(); List<String> al = new
	 * ArrayList<String>(); ModelAndView modelview = new ModelAndView();
	 * al.add(0, "Amit Sah,Lifter"); al.add(1, "Tonmay Chati,Welder"); al.add(2,
	 * "Sulekhai Gosh,Plumber"); al.add(3, "Atanu Majhi,Mason");
	 * model.addAttribute("labourdetails", al);
	 * model.addAttribute("totalliftercount", "109");
	 * model.addAttribute("totalweldercount", "206");
	 * model.addAttribute("totalplumbercount", "320");
	 * model.addAttribute("totalmasoncount", "440"); jsonResponse.setResult(new
	 * ModelAndView("GetAllLabour", "command", model)); return jsonResponse; }
	 * 
	 * @RequestMapping(value = "/getAllContractorWiseLabourList.web", method =
	 * RequestMethod.GET) public @ResponseBody JsonResponse
	 * getAllContractorWiseLabourList() throws IOException, SQLException {
	 * JsonResponse jsonResponse = new JsonResponse(); ModelMap model = new
	 * ModelMap(); List<ModelMap> al = new ArrayList<ModelMap>(); ModelAndView
	 * modelview = new ModelAndView(); String[] a = { "Lifter-15", "Welder-20",
	 * "Plumber-25", "Mason-30" }; String[] b = { "Welder-20", "Plumber-25",
	 * "Mason-40" }; String[] c = { "Lifter-25", "Plumber-30", "Mason-45" };
	 * String[] d = { "Lifter-30", "Welder-35", "Mason-65" }; ModelMap c1 = new
	 * ModelMap(); c1.addAttribute("Contractor", "C1");
	 * c1.addAttribute("Labour", a); al.add(0, c1); ModelMap c2 = new
	 * ModelMap(); c2.addAttribute("Contractor", "C2");
	 * c2.addAttribute("Labour", b); al.add(1, c2); ModelMap c3 = new
	 * ModelMap(); c3.addAttribute("Contractor", "C3");
	 * c3.addAttribute("Labour", c); al.add(2, c3); ModelMap c4 = new
	 * ModelMap(); c4.addAttribute("Contractor", "C4");
	 * c4.addAttribute("Labour", d); al.add(3, c4);
	 * model.addAttribute("details", al); jsonResponse.setResult(new
	 * ModelAndView("GetAllLabour", "command", model)); return jsonResponse; }
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@GetMapping(value = "/getContractorPrifileByIdWithContractorList/{id}")
	public JsonResponse getContractorPrifileByIdWithContractorList(@PathVariable("id") String id)
			throws Exception {
		ModelMap model = new ModelMap();
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getContractorProfileById/" + id, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();  
			String al = new String(data);
			//String[] b = al.split("\\,\"");
			String[] a = al.replaceAll("[\"\"]", "").split("\\,\\|");
			modelmap.addAttribute("ContractorID", a[0].replace("[", ""));
			modelmap.addAttribute("ContractorName", a[1]);
			modelmap.addAttribute("Proprietor", a[2]);
			modelmap.addAttribute("PANNo", a[3]);
			modelmap.addAttribute("EMAIL", a[4]);
			modelmap.addAttribute("ContractorContactNo", a[5]);
			/*String add = null;
			for (int j = 6; j < (a.length - 5); j++) {
				if (j == 6) {
					add = a[j];
				} else if (j == (a.length - 6)) {
					add = add + a[j];
				} else {
					add = add + a[j] + ",";
				}

			}*/
			modelmap.addAttribute("Address", a[(a.length - 6)]);
			modelmap.addAttribute("GSTIN_No", a[(a.length - 5)]);
			modelmap.addAttribute("LabourLicenseNo", a[(a.length - 4)]);
			modelmap.addAttribute("LabourLicenseValidityFrom", a[(a.length - 3)]);
			modelmap.addAttribute("LabourLicenseValidityTo", a[(a.length - 2)]);
			/*
			 * System.out.println("data," + a[(a.length - 1)]);
			 * System.out.println("data:image/jpeg;base64," + picURL); if
			 * (!a[(a.length - 1)].equals("]")) {
			 * System.out.println("---------------------");
			 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * a[(a.length - 1)].replace("]", "")); } else {
			 * System.out.println("data:image/jpeg;base64," + picURL);
			 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * picURL); }
			 */
			String img = getProjectImages(a[(a.length - 1)].replace("]", ""));
			modelmap.addAttribute("Photo", "data:image/jpeg;base64," + img);
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}

		List labourlist = restTemplate.getForObject(gatepassURL + "/getLabourListByContractorId/" + id, List.class);
		ArrayList<ModelMap> val1 = new ArrayList<ModelMap>();
		for (int i = 0; i < labourlist.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, labourlist.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("EmpCode", a[0].replace("[", ""));
			modelmap.addAttribute("EmployeeName", a[1]);
			modelmap.addAttribute("EmployeeType", a[2]);
			modelmap.addAttribute("Father_Husband", a[3]);
			modelmap.addAttribute("Grade", a[4]);
			modelmap.addAttribute("TelephoneMobileNo", a[5]);
			modelmap.addAttribute("JoinDate", a[6]);
			modelmap.addAttribute("Localaddress", a[7]);
			String add = null;
			for (int j = 8; j < (a.length - 3); j++) {
				if (j == 8) {
					add = a[j];
				} else if (j == (a.length - 5)) {
					add = add + a[j];
				} else {
					add = add + a[j] + ",";
				}

			}
			modelmap.addAttribute("PermanentAddress", add);
			modelmap.addAttribute("clr", a[(a.length - 4)]);
			modelmap.addAttribute("DEPTNAME", a[(a.length - 3)]);
			modelmap.addAttribute("LeftDate", a[(a.length - 2)]);
			/*
			 * if (!a[(a.length - 1)].equals("]")) {
			 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * a[(a.length - 1)].replace("]", "")); } else {
			 * System.out.println("data:image/jpeg;base64," + picURL);
			 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * picURL); }
			 */
			String img = getProjectImages(a[(a.length - 1)].replace("]", ""));
			modelmap.addAttribute("Photo", "data:image/jpeg;base64," + img);
			val1.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		model.addAttribute("ContractorProfile", val);
		model.addAttribute("LabourDetails", val1);
		jsonResponse.setResult(model);
		return jsonResponse;
	}

	@SuppressWarnings("unchecked")
	@GetMapping(value = "/getLabourDetailsById/{id}")
	public JsonResponse getLabourDetailsById(@PathVariable("id") String id) throws Exception {
		ModelMap model = new ModelMap();
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getLabourDetailsById/" + id, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("EmpCode", a[0].replace("[", ""));
			modelmap.addAttribute("EmployeeName", a[1]);
			modelmap.addAttribute("EmployeeType", a[2]);
			modelmap.addAttribute("Father_Husband", a[3]);
			modelmap.addAttribute("Grade", a[4]);
			modelmap.addAttribute("TelephoneMobileNo", a[5]);
			modelmap.addAttribute("JoinDate", a[6]);
			modelmap.addAttribute("Localaddress", a[7]);
			String add = null;
			for (int j = 8; j < (a.length - 5); j++) {
				if (j == 8) {
					add = a[j];
				} else if (j == (a.length - 6)) {
					add = add + a[j];
				} else {
					add = add + a[j] + ",";
				}

			}
			modelmap.addAttribute("PermanentAddress", add);
			modelmap.addAttribute("LeftDate", a[(a.length - 5)]);
			modelmap.addAttribute("DEPTNAME", a[(a.length - 4)]);
			/*
			 * System.out.println("------------------------------------------");
			 * System.out.println(a[(a.length - 3)]); if (a[(a.length -
			 * 3)].equals("")) {
			 * System.out.println("-----------------IF-------------------------"
			 * ); modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * picURL);
			 * 
			 * } else { System.out.println(
			 * "-----------------ELSE-------------------------");
			 * System.out.println("data:image/jpeg;base64," + picURL);
			 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
			 * a[(a.length - 3)]); }
			 */
			String img = getProjectImages(a[(a.length - 3)]);
			modelmap.addAttribute("Photo", "data:image/jpeg;base64," + picURL);
			modelmap.addAttribute("ContractorName", a[(a.length - 2)]);
			modelmap.addAttribute("PROPRIETOR", a[(a.length - 1)].replace("]", ""));
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val);
		return jsonResponse;
	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getDailyReports/{id}/{date}/{todt}")
	public JsonResponse getDailyReports(@PathVariable("id") String id, @PathVariable("date") String date
			, @PathVariable("todt") String todt)
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getDailyReports/" + id + "/" + date+ "/" + todt, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("EmployeeName", a[0].replace("[", ""));
			modelmap.addAttribute("Grade", a[1]);
			modelmap.addAttribute("ShiftCode", a[2]);
			modelmap.addAttribute("InTime", a[3]);
			modelmap.addAttribute("OutTime", a[4]);
			modelmap.addAttribute("WorkHrs", a[5].replace("]", ""));
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val);
		return jsonResponse;
	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getContractorStatisticDataById/{id}")
	public JsonResponse getContractorStatisticDepartmentData(@PathVariable("id") String id)
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap model = new ModelMap();
		List gp = restTemplate.getForObject(gatepassURL + "/getContractorStatisticBarChartData/" + id, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < 1; i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("January", a[0].replace("[", ""));
			modelmap.addAttribute("February", a[1]);
			modelmap.addAttribute("March", a[2]);
			modelmap.addAttribute("April", a[3]);
			modelmap.addAttribute("May", a[4]);
			modelmap.addAttribute("June", a[5]);
			modelmap.addAttribute("July", a[6]);
			modelmap.addAttribute("August", a[7]);
			modelmap.addAttribute("September", a[8]);
			modelmap.addAttribute("October", a[9]);
			modelmap.addAttribute("November", a[10]);
			modelmap.addAttribute("December", a[11]);
			modelmap.addAttribute("Total", a[12].replace("]", ""));
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		model.addAttribute("BarChartData", val);
		List dc = restTemplate.getForObject(gatepassURL + "/getContractorStatisticDonnatChartData/" + id, List.class);
		ArrayList<ModelMap> val1 = new ArrayList<ModelMap>();
		for (int i = 0; i < dc.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, dc.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("Grade", a[0].replace("[", ""));
			modelmap.addAttribute("Gradecode", a[1]);
			modelmap.addAttribute("WorkersCount", a[2].replace("]", ""));
			val1.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		model.addAttribute("DonnatChartData", val1);
		List dd = restTemplate.getForObject(gatepassURL + "/getContractorStatisticDepartmentData/" + id, List.class);
		ArrayList<ModelMap> val2 = new ArrayList<ModelMap>();
		for (int i = 0; i < dd.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, dd.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("DeptName", a[0].replace("[", ""));
			modelmap.addAttribute("DeptCode", a[1]);
			modelmap.addAttribute("WorkersCount", a[2].replace("]", ""));
			val2.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		model.addAttribute("DepartmentTableData", val2);
		jsonResponse.setResult(model);
		return jsonResponse;
	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getPurchaseOrderListByContractorId/{id}")
	public JsonResponse getPurchaseOrderListByContractorId(@PathVariable("id") String id)
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getPurchaseOrderListByContractorId/" + id, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("PurchaseOrderNo", a[0].replace("[", ""));
			modelmap.addAttribute("ValidityFrom", a[1]);
			modelmap.addAttribute("ValidityTo", a[2]);
			modelmap.addAttribute("DeptName", a[3]);
			modelmap.addAttribute("EmployeeEngaged", a[4]);
			modelmap.addAttribute("SuperVisorName", a[5].replace("]", ""));
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val);
		return jsonResponse;
	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getStatisticPageData")
	public JsonResponse getStatisticPageData()
	throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap responsemodel = new ModelMap();
		List splml = restTemplate.getForObject(gatepassURL+"/getSkillWiseLabourList",
		List.class);
		System.out.println(splml);
		ArrayList<ModelMap> valsplml = new ArrayList<ModelMap>();
		for (int i = 0; i < splml.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(splml.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			System.out.println(al);
			modelmap.addAttribute("Grade", a[0].replace("[",""));
			modelmap.addAttribute("Emp", a[1].replace("]",""));
			valsplml.add(modelmap);
			modelmap = null;
		}
		responsemodel.addAttribute("SPPieChartData", valsplml);
		List spcml = restTemplate.getForObject(gatepassURL+"/getSPContractorLabourList",
		List.class);
		//restTemplate.getForObject(gatepassURL + "/getStatisticPageContractorMonthlyList", List.class);
		ArrayList<ModelMap> valspcml = new ArrayList<ModelMap>();
		for (int i = 0; i < spcml.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(spcml.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("ContractorID", a[0].replace("[",""));
			modelmap.addAttribute("ContractorName", a[1]);
			modelmap.addAttribute("Emp", a[2].replace("]",""));
			List swls = restTemplate.getForObject(gatepassURL+"/getSkillLabourListByContID/"+a[0].replace("[",""),
			List.class);
			String htnlcode="<div>Total Labour:"+a[2].replace("]","")+"</div><br/><table>";
			for (int j = 0; j < swls.size(); j++) {
				String al1 = new String(swls.get(j).toString());
				String[] a1 = al1.replaceAll("[\"\"]", "").split("\\,");
				htnlcode=htnlcode+"<tr><td>"+a1[0].replace("[","")+"</td><td>"+a1[1].replace("]","")+"</td></tr>";
			}
			modelmap.addAttribute("TLC", htnlcode+"</table>");
			valspcml.add(modelmap);
			modelmap = null;
		}
		responsemodel.addAttribute("SPContractorMonthlyList", valspcml);
		List sppcd = restTemplate.getForObject(gatepassURL+"/getStatisticPageLabourMonthlyList",
		List.class);
		ArrayList<ModelMap> valsppcd = new ArrayList<ModelMap>();
		for (int i = 0; i < sppcd.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(sppcd.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			System.out.println(al);
			modelmap.addAttribute("Date", a[0].replace("[",""));
			modelmap.addAttribute("Number", a[1].replace("]",""));
			List swls = restTemplate.getForObject(gatepassURL+"/getTodaysPresentLabourListSkillWise/"+i,
			List.class);
			String htnlcode="<div>Total Labour:"+a[1].replace("]","")+"</div><br/><table>";
			for (int j = 0; j < swls.size(); j++) {
				String al1 = new String(swls.get(j).toString());
				String[] a1 = al1.replaceAll("[\"\"]", "").split("\\,");
				htnlcode=htnlcode+"<tr><td>"+a1[0].replace("[","")+"</td><td>"+a1[1].replace("]","")+"</td></tr>";
			}
			modelmap.addAttribute("TLC", htnlcode+"</table>");
			valsppcd.add(modelmap);
			modelmap = null;
		}
		responsemodel.addAttribute("SPLabourMonthlyList", valsppcd);
		List sppcda = restTemplate.getForObject(gatepassURL+"/getAreaWiseLabourList",
		List.class);
		ArrayList<ModelMap> valsppcda = new ArrayList<ModelMap>();
		for (int i = 0; i < sppcda.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(sppcda.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			System.out.println(al);
			modelmap.addAttribute("DeptName", a[0].replace("[",""));
			modelmap.addAttribute("Number", a[1].replace("]",""));
			valsppcda.add(modelmap);
			modelmap = null;
		}
		responsemodel.addAttribute("SPAreaWiseLabourList", valsppcda);
		List scenfd = restTemplate.getForObject(gatepassURL+"/getSafteyExpireLabourList",
		List.class);
		ArrayList<ModelMap> valscenfd = new ArrayList<ModelMap>();
		for (int i = 0; i < scenfd.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(scenfd.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			System.out.println(al);
			modelmap.addAttribute("Today", a[0].replace("[",""));
			modelmap.addAttribute("Number", a[1].replace("]",""));
			valscenfd.add(modelmap);
			modelmap = null;
		}
		responsemodel.addAttribute("SafteyCertificateExpiaryList", valscenfd);
		jsonResponse.setResult(responsemodel);
		return jsonResponse;
	}

	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getLabourListByDepartmentId/{id}")
	public JsonResponse getLabourListByDepartmentId(@PathVariable("id") String id)
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getLabourListByDepartmentId/" + id, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			if (a.length == 7) {
				modelmap.addAttribute("EmpCode", a[0].replace("[", ""));
				modelmap.addAttribute("EmployeeName", a[1]);
				modelmap.addAttribute("ContractorName", a[2]);
				modelmap.addAttribute("JoinDate", a[3] + ", " + a[4] + ", " + a[5]);
				modelmap.addAttribute("LeftDate", a[6].replace("]", ""));
				val.add(modelmap);
			} else {
				modelmap.addAttribute("EmpCode", a[0].replace("[", ""));
				modelmap.addAttribute("EmployeeName", a[1]);
				modelmap.addAttribute("ContractorName", a[2]);
				modelmap.addAttribute("JoinDate", a[3] + ", " + a[4] + ", " + a[5]);
				modelmap.addAttribute("LeftDate", a[6] + ", " + a[7] + ", " + a[8].replace("]", ""));
				val.add(modelmap);
			}

			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val);
		return jsonResponse;
	}

	// @RequestMapping(value = "/test", method = RequestMethod.POST)
	public String getProjectImages(String docpath) throws Exception {
		String base64 = "";
		// String images = new ArrayList<String>();
		try {

			File targetFile = new File(docpath);
			File[] files = targetFile.listFiles();
			// if (files != null && files.length > 0) {
			// for (int i = 0; i < files.length; i++) {
			// FileInputStream fis = new FileInputStream(files[i]);
			FileInputStream fis = new FileInputStream(targetFile);
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			int b;
			byte[] buffer = new byte[1024];
			while ((b = fis.read(buffer)) != -1) {
				bos.write(buffer, 0, b);
			}
			byte[] fileBytes = bos.toByteArray();
			fis.close();
			bos.close();
			base64 = javax.xml.bind.DatatypeConverter.printBase64Binary(fileBytes);
			// images.add(base64);
			// }
			/*
			 * } else { base64 = "NA"; }
			 */
		} catch (Exception e) {
			e.printStackTrace();
			base64 = picURL;
		}

		return base64;
	}
	
	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getMapData")
	public JsonResponse getMapData()
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List mapdata = restTemplate.getForObject(gatepassURL + "/getMapData", List.class);
		ArrayList<ModelMap> val1 = new ArrayList<ModelMap>();
		for (int i = 0; i < mapdata.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, mapdata.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("DeptName", a[0].replace("[", ""));
			modelmap.addAttribute("LabourCount", a[1].replace("]", ""));
			modelmap.addAttribute("Sub_Dept", getMapSubDeptData(a[0].replace("[", "")));
			val1.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val1);
		return jsonResponse;
	}
	
	ArrayList<ModelMap> getMapSubDeptData(String masterDeptName) throws JsonGenerationException, JsonMappingException, IOException{
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List mapdata = restTemplate.getForObject(gatepassURL + "/getMapSubDeptData/"+masterDeptName, List.class);
		ArrayList<ModelMap> val1 = new ArrayList<ModelMap>();
		for (int i = 0; i < mapdata.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, mapdata.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("SubDeptName", a[0].replace("[", ""));
			modelmap.addAttribute("LabourCount", a[1].replace("]", ""));
			val1.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val1);
		return val1;
	}
	
	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getDlyRptForMapBydept/{dept}")
	public JsonResponse getDlyRptForMapBydept(@PathVariable("dept") String dept)
	throws JsonParseException, JsonMappingException, IOException {
	JsonResponse jsonResponse = new JsonResponse();
	RestTemplate restTemplate = new RestTemplate();
	List gp = restTemplate.getForObject(gatepassURL + "/getDlyRptForMapBydept/" + dept, List.class);
	ArrayList<ModelMap> val = new ArrayList<ModelMap>();
	for (int i = 0; i < gp.size(); i++) {
	ModelMap modelmap = new ModelMap();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	ObjectMapper mapper1 = new ObjectMapper();
	mapper1.writeValue(out, gp.get(i));
	byte[] data = out.toByteArray();
	String al = new String(data);
	String[] a = al.replaceAll("[\"\"]", "").split("\\,");
	modelmap.addAttribute("EmployeeName", a[0].replace("[", ""));
	modelmap.addAttribute("Grade", a[1]);
	modelmap.addAttribute("ShiftCode", a[2]);
	modelmap.addAttribute("InTime", a[3]);
	modelmap.addAttribute("OutTime", a[4]);
	modelmap.addAttribute("WorkHrs", a[5].replace("]", ""));
	val.add(modelmap);
	out = null;
	data = null;
	modelmap = null;
	}
	jsonResponse.setResult(val);
	return jsonResponse;
	}


	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getDlyRptForMapBySubdept/{dept}/{subDept}")
	public JsonResponse getDlyRptForMapBySubdept(@PathVariable("dept") String dept,
	@PathVariable("subDept") String subDept)
	throws JsonParseException, JsonMappingException, IOException {
	JsonResponse jsonResponse = new JsonResponse();
	RestTemplate restTemplate = new RestTemplate();
	List gp = restTemplate.getForObject(gatepassURL + "/getDlyRptForMapBySubdept/" + dept + "/"+ subDept, List.class);
	ArrayList<ModelMap> val = new ArrayList<ModelMap>();
	for (int i = 0; i < gp.size(); i++) {
	ModelMap modelmap = new ModelMap();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	ObjectMapper mapper1 = new ObjectMapper();
	mapper1.writeValue(out, gp.get(i));
	byte[] data = out.toByteArray();
	String al = new String(data);
	String[] a = al.replaceAll("[\"\"]", "").split("\\,");
	modelmap.addAttribute("EmployeeName", a[0].replace("[", ""));
	modelmap.addAttribute("Grade", a[1]);
	modelmap.addAttribute("ShiftCode", a[2]);
	modelmap.addAttribute("InTime", a[3]);
	modelmap.addAttribute("OutTime", a[4]);
	modelmap.addAttribute("WorkHrs", a[5].replace("]", ""));
	val.add(modelmap);
	out = null;
	data = null;
	modelmap = null;
	}
	jsonResponse.setResult(val);
	return jsonResponse;
	}
	
	
	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getTest")
	public JsonResponse getTest()
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		/*List splml = restTemplate.getForObject(gatepassURL + "/getStatisticPageLabourMonthlyList",
		List.class);*/
		List splml = restTemplate.getForObject(gatepassURL+"/getStatisticPageLabourMonthlyList",
				List.class);
		System.out.println(splml);
		ArrayList<ModelMap> valsplml = new ArrayList<ModelMap>();
		for (int i = 0; i < splml.size(); i++) {
			ModelMap modelmap = new ModelMap();
			String al = new String(splml.get(i).toString());
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			System.out.println(al);
			modelmap.addAttribute("Date", a[0].replace("[",""));
			modelmap.addAttribute("Number", a[1].replace("]",""));
			valsplml.add(modelmap);
			modelmap = null;
		}
		jsonResponse.setResult(valsplml);
		return jsonResponse;
	}

	@PostMapping(value = "/insrtGrphDta.web")
	public JsonResponse insrtGrphDta(@RequestBody GraphData graphData) throws IOException {
		// exceptionLog.setRequestObject(summary);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(graphData);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/insrtGrphDta", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		jsonResponse.setResult(status);
		return jsonResponse;
	}
	
	@PostMapping(value = "/getgrphDta.web")
	public JsonResponse getgrphDta(@RequestBody ModelMap model) throws IOException {
		// exceptionLog.setRequestObject(model);
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String playListJson = restTemplate
				.getForObject(docURL + "/getGrphDta/" + model.get("projectid").toString(), String.class);
		List<GraphData> grphDetail = mapper.readValue(playListJson,
				mapper.getTypeFactory().constructCollectionType(List.class, GraphData.class));
        jsonResponse.setResult(grphDetail);
		System.out.println(jsonResponse);
		return jsonResponse;
	}
	
	
	@PostMapping(value = "/updategrphDta")
	public JsonResponse updategrphDta(@RequestBody GraphData grphDta) throws IOException { 
		// exceptionLog.setRequestObject(projectInterval);
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(grphDta);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		String answer = restTemplate.postForObject(docURL + "/updateGrphDta", entity, String.class);
		status = mapper.readValue(answer, Status.class);
		if (status.getMessage().equals(" Updated Successfully")) {
			jsonResponse.setResult(status);
		} else {
			status.setCode("ERROR_INTV_02");
			status.setMessage("Updation Failed !");
		}
		return jsonResponse;
	}
	
	
	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getSubDptByMstDpt/{id}")
	public JsonResponse getDailyReports(@PathVariable("id") String id)
			{
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		List gp = restTemplate.getForObject(gatepassURL + "/getSubDptByMstDpt/" + id , List.class);
	
		jsonResponse.setResult(gp);
		return jsonResponse;
	}
	
	
	@SuppressWarnings("rawtypes")
//	@RequestMapping(value = "/getDailyReportsByDept/{dept}/{subDept}/{date}", method = RequestMethod.GET)
//	public @ResponseBody JsonResponse getDailyReportsByDept(@PathVariable("dept") String dept, @PathVariable("subDept") String subDept,
//	@PathVariable("date") String date)
	@PostMapping(value = "/getDailyReportsByDept")
	public JsonResponse getDailyReportsByDept(@RequestBody ModelMap model)
			throws JsonParseException, JsonMappingException, IOException {
		// JsonResponse jsonResponse = new JsonResponse();
		// RestTemplate restTemplate = new RestTemplate();
		// List gp = restTemplate.getForObject(gatepassURL +
		// "/getDailyReportsByDept/" + dept + "/"+ subDept + "/" + date,
		// List.class);
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ObjectMapper mapper = new ObjectMapper();
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(model);
		HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
		List gp = restTemplate.postForObject(gatepassURL + "/getDailyReportsByDept", entity, List.class);
		ArrayList<ModelMap> val = new ArrayList<ModelMap>();
		for (int i = 0; i < gp.size(); i++) {
			ModelMap modelmap = new ModelMap();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			ObjectMapper mapper1 = new ObjectMapper();
			mapper1.writeValue(out, gp.get(i));
			byte[] data = out.toByteArray();
			String al = new String(data);
			String[] a = al.replaceAll("[\"\"]", "").split("\\,");
			modelmap.addAttribute("EmployeeName", a[0].replace("[", ""));
			modelmap.addAttribute("Grade", a[1]);
			modelmap.addAttribute("ShiftCode", a[2]);
			modelmap.addAttribute("InTime", a[3]);
			modelmap.addAttribute("OutTime", a[4]);
			modelmap.addAttribute("WorkHrs", a[5].replace("]", ""));
			val.add(modelmap);
			out = null;
			data = null;
			modelmap = null;
		}
		jsonResponse.setResult(val);
		return jsonResponse;
	}
	
	@SuppressWarnings("rawtypes")
	//@RequestMapping(value = "/getDailyReportsByCntDept/{cant}/{dept}/{subDept}/{date}", method = RequestMethod.GET)
//	public @ResponseBody JsonResponse getDailyReportsByCntDept(@PathVariable("cant") String cant,
//			@PathVariable("dept") String dept, @PathVariable("subDept") String subDept,
//	@PathVariable("date") String date)
	@PostMapping(value = "/getDailyReportsByCntDept")
	public JsonResponse getDailyReportsByCntDept(@RequestBody ModelMap model)
	throws JsonParseException, JsonMappingException, IOException {
	JsonResponse jsonResponse = new JsonResponse();
	RestTemplate restTemplate = new RestTemplate();
	ObjectMapper mapper = new ObjectMapper();
	HttpHeaders headers = new HttpHeaders();
	headers.setContentType(MediaType.APPLICATION_JSON);
	//List gp = restTemplate.getForObject(gatepassURL + "/getDailyReportsByCntDept/"+ model.get("cant") + "/" + model.get("dept") + "/"+ 
			//model.get("subDept") + "/" + model.get("date"), List.class);
	String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(model);
	HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
	List gp = restTemplate.postForObject(gatepassURL + "/getDailyReportsByCntDept", entity, List.class);
	ArrayList<ModelMap> val = new ArrayList<ModelMap>();
	for (int i = 0; i < gp.size(); i++) {
	ModelMap modelmap = new ModelMap();
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	ObjectMapper mapper1 = new ObjectMapper();
	mapper1.writeValue(out, gp.get(i));
	byte[] data = out.toByteArray();
	String al = new String(data);
	String[] a = al.replaceAll("[\"\"]", "").split("\\,");
	modelmap.addAttribute("EmployeeName", a[0].replace("[", ""));
	modelmap.addAttribute("Grade", a[1]);
	modelmap.addAttribute("ShiftCode", a[2]);
	modelmap.addAttribute("InTime", a[3]);
	modelmap.addAttribute("OutTime", a[4]);
	modelmap.addAttribute("WorkHrs", a[5].replace("]", ""));
	val.add(modelmap);
	out = null;
	data = null;
	modelmap = null;
	}
	jsonResponse.setResult(val);
	return jsonResponse;
	}
	
	
	@SuppressWarnings("rawtypes")
	@GetMapping(value = "/getSaftyorCrntPrsntLbrLst/{idnt}")
	public JsonResponse getSaftyorCrntPrsntLbrLst(@PathVariable("idnt") String idnt)
	throws Exception { 
	JsonResponse jsonResponse = new JsonResponse();
	RestTemplate restTemplate = new RestTemplate();
	List labourlist=null;
	if(idnt.equals("Safety")){
		labourlist= restTemplate.getForObject(gatepassURL + "/getSaftyExpLbrLst/", List.class);
	}else{
		labourlist= restTemplate.getForObject(gatepassURL + "/getPresntLbrLst/", List.class);
	}
	
	ArrayList<ModelMap> val1 = new ArrayList<ModelMap>();
	for (int i = 0; i < labourlist.size(); i++) {
		ModelMap modelmap = new ModelMap();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		ObjectMapper mapper1 = new ObjectMapper();
		mapper1.writeValue(out, labourlist.get(i));
		byte[] data = out.toByteArray();
		String al = new String(data);
		String[] a = al.replaceAll("[\"\"]", "").split("\\,");
		modelmap.addAttribute("EmpCode", a[0].replace("[", ""));
		modelmap.addAttribute("EmployeeName", a[1]);
		modelmap.addAttribute("EmployeeType", a[2]);
		modelmap.addAttribute("Father_Husband", a[3]);
		modelmap.addAttribute("Grade", a[4]);
		modelmap.addAttribute("TelephoneMobileNo", a[5]);
		modelmap.addAttribute("JoinDate", a[6]);
		modelmap.addAttribute("Localaddress", a[7]);
		String add = null;
		for (int j = 8; j < (a.length - 3); j++) {
			if (j == 8) {
				add = a[j];
			} else if (j == (a.length - 5)) {
				add = add + a[j];
			} else {
				add = add + a[j] + ",";
			}

		}
		modelmap.addAttribute("PermanentAddress", add);
		modelmap.addAttribute("clr", a[(a.length - 4)]);
		modelmap.addAttribute("DEPTNAME", a[(a.length - 3)]);
		modelmap.addAttribute("LeftDate", a[(a.length - 2)]);
		/*
		 * if (!a[(a.length - 1)].equals("]")) {
		 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
		 * a[(a.length - 1)].replace("]", "")); } else {
		 * System.out.println("data:image/jpeg;base64," + picURL);
		 * modelmap.addAttribute("Photo", "data:image/jpeg;base64," +
		 * picURL); }
		 */
		String img = getProjectImages(a[(a.length - 1)].replace("]", ""));
		modelmap.addAttribute("Photo", "data:image/jpeg;base64," + img);
		val1.add(modelmap);
		out = null;
		data = null;
		modelmap = null;
	}
	jsonResponse.setResult(val1); 
	return jsonResponse;
	}
	
	

	private  JsonResponse sendMail(String otpno,String email) throws IOException { 
		// exceptionLog.setRequestObject(projectInterval);
	
		ObjectMapper mapper = new ObjectMapper();
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		Status status = new Status();
		HttpHeaders headers = new HttpHeaders();
		EmailDetails mail= new EmailDetails();
		try {
			String otp=otpno;
			mail.setMsgBody("PMDashboard OTP to login: "+otp);
			mail.setSubject("PMDashboard OTP"); 
			mail.setRecipient(email); 
			headers.setContentType(MediaType.APPLICATION_JSON);
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mail);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			String answer = restTemplate.postForObject(emailURL + "/sendMail", entity, String.class);
			if (answer.equalsIgnoreCase("Mail Sent Successfully...")) {
				status.setCode(otp);
				status.setMessage(answer);
			} else {
				status.setCode("ERR0001");
				status.setMessage(answer);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			status.setCode("ERR0001");
			status.setMessage("Failed");
		}
		
		jsonResponse.setResult(status);
		
		return jsonResponse;
	}
	
	@PostMapping(value = "/validateOTP")
	public JsonResponse validateOTP(@RequestBody ModelMap requestModel)
			throws JsonParseException, JsonMappingException, IOException {
		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ServiceResponse transactionsres= new ServiceResponse();
		try {
			 transactionsres = restTemplate.getForObject(
					accountURL + "/validateOTP/" + DecryptString.main((String) requestModel.get("userId"))+ "/" + requestModel.get("otp"),
					ServiceResponse.class);
		} catch (Exception e) {
			// TODO: handle exception
			transactionsres.setError(true);
			transactionsres.setMessage("Failed");  
			transactionsres.setResponsedata("Failed");
		}
		
		jsonResponse.setResult(transactionsres);
		return jsonResponse;
	}
	@PostMapping(value = "/regenOTP")
	public JsonResponse regenOTP(@RequestBody ModelMap requestModel)
			throws JsonParseException, JsonMappingException, IOException {
//		JsonResponse jsonResponse = new JsonResponse();
		RestTemplate restTemplate = new RestTemplate();
		ServiceResponse transactionsres = restTemplate.getForObject(
				accountURL + "/generateOTP/" + DecryptString.main((String) requestModel.get("userId")),
				ServiceResponse.class);
//		jsonResponse.setResult(transactionsres);
		JsonResponse jsonResponse = sendMail((String) transactionsres.getResponsedata(), DecryptString.main((String) requestModel.get("email")));
		return jsonResponse;
	}
	
	@PostMapping(value = "/loginCSRUser")
	public JsonResponse loginCSRUser(@RequestBody ModelMap requestModel)
			throws MPXJException, JsonParseException, JsonMappingException, IOException {
		// exceptionLog.setRequestObject(requestModel);
		System.out.println("login user");
		JsonResponse jsonResponse = new JsonResponse();
		ObjectMapper mapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		ModelMap responsemodel = new ModelMap();
		responsemodel.addAttribute("message", "");
		responsemodel.addAttribute("code", "");
		
		try {
		
		
		String userid = (String) requestModel.get("userId");
		String[] usrstr = userid.split("@");
		System.out.println(usrstr[0]);
		System.out.println(usrstr[1]);
		List projectList = new ArrayList();
		List projectList1 = new ArrayList();
		if (usrstr[1].equals("tatametaliks.co.in")) {
			System.out.println("LDAP authentication");
			responsemodel.put("message", "LDAP authentication");
			responsemodel.put("code", "MSG002");
		} else {
			System.out.println("TMT authentication");
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			ModelMap accountmodel = new ModelMap();
			accountmodel.addAttribute("email",  (String) requestModel.get("userId"));
			accountmodel.addAttribute("password", (String) requestModel.get("password"));
			String jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(accountmodel);
			HttpEntity<String> entity = new HttpEntity<String>(jsonInString, headers);
			String answer = restTemplate.postForObject(accountURL + "/accountAuthentication", entity, String.class);
			System.out.println(answer);
			ResponsePojo result = mapper.readValue(answer, ResponsePojo.class);

			// Status authenticate = mapper.readValue(answer, Status.class);
			if (result.getResponsedata() != null) {
				String accountId = result.getResponsedata().getId();
				if (result.getMessage().equalsIgnoreCase("Authenticated")) {
					ResponsePojo serviceResponse = restTemplate.getForObject(accountURL + "/Account/" + accountId,
							ResponsePojo.class);
					responsemodel.addAttribute("Profile", serviceResponse.getResponsedata());

					String projectListJson = restTemplate.getForObject(docURL + "/Project", String.class);
					List<Project> listOfProjects = mapper.readValue(projectListJson,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));
					for (int i = 0; i < listOfProjects.size(); i++) {
						projectList.add(
								listOfProjects.get(i).getProjectid() + "-" + listOfProjects.get(i).getProjectname());
					}

					String projectListJson1 = restTemplate.getForObject(docURL + "/ProjectAll", String.class);
					List<Project> listOfProjects1 = mapper.readValue(projectListJson1,
							mapper.getTypeFactory().constructCollectionType(List.class, Project.class));

					String category = restTemplate.getForObject(docURL + "/getMasterCategoryList", String.class);
					List<String> categoryList = mapper.readValue(category, List.class);
					String subCategory = restTemplate.getForObject(docURL + "/getMasterSubCategoryList", String.class);
					List<String> subCategoryList = mapper.readValue(subCategory, List.class);

					String decipline = restTemplate.getForObject(docURL + "/getDeciplineList", String.class);
					List<String> deciplineList = mapper.readValue(decipline, List.class);

					ServiceResponse userlistResponse = restTemplate.getForObject(accountURL + "/Account",
							ServiceResponse.class);
					String usrListjson = mapper.writeValueAsString(userlistResponse.getResponsedata());

					List<Account> userlist = mapper.readValue(usrListjson,
							mapper.getTypeFactory().constructCollectionType(List.class, Account.class));

					responsemodel.addAttribute("userlist", userlist);

					Map<String, Timestamp> projectUpdateDtJson = restTemplate.getForObject(docURL + "/getprojectUpdateDate", HashMap.class);
					responsemodel.addAttribute("projectUpdateDt", projectUpdateDtJson);
					responsemodel.addAttribute("projectlist", listOfProjects);
					responsemodel.addAttribute("projectlistA", listOfProjects1);
					responsemodel.addAttribute("plist", projectList);
					responsemodel.addAttribute("totalProjects", listOfProjects.size());
					responsemodel.addAttribute("category", categoryList);
					responsemodel.addAttribute("subcategory", subCategoryList);
					responsemodel.addAttribute("decipline", deciplineList);
					responsemodel.addAttribute("logidentity", "Login");
					if (serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Super")
							|| serviceResponse.getResponsedata().getTypeid().equalsIgnoreCase("Support")) {

						RoleListDto roles = restTemplate.getForObject(roleURL + "/Role", RoleListDto.class);
						responsemodel.addAttribute("Roles", roles.getResponsedata());

						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);
						System.out.println(mod.getResponsedata());
						List<String> listofmod = new ArrayList();

						for (int l = 0; l < roles.getResponsedata().length; l++) {
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ roles.getResponsedata()[l].getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));

							List<Transactions> listoftrans = new ArrayList<Transactions>();

							for (int m = 0; m < roleaccessList.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listoftrans.add(transactions);
							}
							responsemodel.addAttribute(roles.getResponsedata()[l].getRolename().toString(),
									listoftrans);
						}
						responsemodel.addAttribute("Module", mod.getResponsedata());

						TransactionListDto transactions = restTemplate.getForObject(moduleURL + "/transaction",
								TransactionListDto.class);
						responsemodel.addAttribute("Transactions", transactions.getResponsedata());
						ReportListDto reports = restTemplate.getForObject(moduleURL + "/report", ReportListDto.class);
						responsemodel.addAttribute("Reports", reports.getResponsedata());

						// obj.setResult(model);
						// return obj;
					} else {
						ModuleListDto mod = restTemplate.getForObject(moduleURL + "/module", ModuleListDto.class);

						ServiceResponse ResponseRoledata = restTemplate.getForObject(accessURL + "/UserAccessByAccount/"
								+ serviceResponse.getResponsedata().getId().toString(), ServiceResponse.class);
						String rolejson = mapper.writeValueAsString(ResponseRoledata.getResponsedata());

						List<UserAccess> userAccessList = mapper.readValue(rolejson,
								mapper.getTypeFactory().constructCollectionType(List.class, UserAccess.class));
						System.out.println(accessURL + "/ByRole/" + ResponseRoledata.getResponsedata());

						// ModelMap n = new ModelMap();
						List<Role> listofRole = new ArrayList<Role>();

						for (int i = 0; i < userAccessList.size(); i++) {
							List<Transactions> listTransactions = new ArrayList<Transactions>();
							ServiceResponse ResponseRoleDtl = restTemplate.getForObject(
									roleURL + "/Role/" + userAccessList.get(i).getRoleid().toString(),
									ServiceResponse.class);

							String roljson = mapper.writeValueAsString(ResponseRoleDtl.getResponsedata());
							Role role = mapper.readValue(roljson, Role.class);
							listofRole.add(role);
							ServiceResponse serviceResponseTra = restTemplate
									.getForObject(
											accessURL + "/RoleTransactionByRole/"
													+ userAccessList.get(i).getRoleid().toString(),
											ServiceResponse.class);

							String actjson = mapper.writeValueAsString(serviceResponseTra.getResponsedata());

							List<RoleTransactionDetails> roleaccessList1 = mapper.readValue(actjson,
									mapper.getTypeFactory().constructCollectionType(List.class,
											RoleTransactionDetails.class));
							for (int m = 0; m < roleaccessList1.size(); m++) {
								ServiceResponse transactionsres = restTemplate.getForObject(
										moduleURL + "/transaction/" + roleaccessList1.get(m).getTransaction_id(),
										ServiceResponse.class);
								String tranjson = mapper.writeValueAsString(transactionsres.getResponsedata());
								Transactions transactions = mapper.readValue(tranjson, Transactions.class);
								listTransactions.add(transactions);

							}

							responsemodel.addAttribute(role.getRolename().toString(), listTransactions);

						}
						responsemodel.addAttribute("Roles", listofRole);
						responsemodel.addAttribute("Module", mod.getResponsedata());
						// responsemodel.addAttribute("Profile",
						// serviceResponse.getResponsedata());
						// obj.setResult(n);
						// return obj;
					}

					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG001");

				} else {
					responsemodel.put("message", result.getMessage());
					responsemodel.put("code", "MSG002");
				}
			} else {
				responsemodel.put("message", result.getMessage());
				responsemodel.put("code", "MSG002");
			}
		}
		} catch (Exception e) {
			responsemodel.put("message", "Something wrong happened");
			responsemodel.put("code", "MSG002");
		}
		jsonResponse.setResult(responsemodel);
		return jsonResponse;
	}

	
}
